-- MySQL Script generated by MySQL Workbench
-- Mon Dec  2 15:03:00 2017
-- Model: annualcycle    Version: 1.1.7
-- MySQL Workbench Forward Engineering
-- Last edited by Vebjorn A.A

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema annualcycle
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `annualcycle` ;

-- -----------------------------------------------------
-- Schema annualcycle
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `annualcycle` DEFAULT CHARACTER SET utf8 ;
USE `annualcycle` ;

-- -----------------------------------------------------
-- Table `annualcycle`.`User`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `annualcycle`.`User` ;

CREATE TABLE IF NOT EXISTS `annualcycle`.`User` (
  `UserId` INT NOT NULL auto_increment,
  `Email` VARCHAR(45) NOT NULL,
  `Password` VARCHAR(125) NOT NULL,
  `Salt` VARCHAR(20) NOT NULL,
  `Name` VARCHAR(60) NOT NULL,
  `Datecreated` DATE NOT NULL,
  `Deleted` TINYINT(1) NOT NULL default 0,
  PRIMARY KEY (`UserId`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `annualcycle`.`forgot_pass_link`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `annualcycle`.`Forgot_pass_link` ;

CREATE TABLE IF NOT EXISTS `annualcycle`.`Forgot_pass_link` (
  `ForgotpasslinkId` INT NOT NULL auto_increment,
  `UserId` INT NOT NULL,
  `Url` VARCHAR(256) NOT NULL,
  `Deleted` TINYINT(1) NOT NULL default 0,
  PRIMARY KEY (`ForgotpasslinkId`),
  CONSTRAINT `UserId`
    FOREIGN KEY (`UserId`)
    REFERENCES `annualcycle`.`User` (`UserId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `annualcycle`.`Calendar`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `annualcycle`.`Calendar` ;

CREATE TABLE IF NOT EXISTS `annualcycle`.`Calendar` (
  `CalendarId` INT NOT NULL auto_increment,
  `Name` VARCHAR(45) NOT NULL,
  `Public` TINYINT(1) NOT NULL default 0,
  `Deleted` TINYINT(1) NOT NULL default 0,
  PRIMARY KEY (`CalendarId`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `annualcycle`.`Usercalendars`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `annualcycle`.`Usercalendars` ;

CREATE TABLE IF NOT EXISTS `annualcycle`.`Usercalendars` (
  `UserId` INT NOT NULL,
  `CalendarId` INT NOT NULL,
  `Adminlevel` INT NOT NULL,
  `Notifications` TINYINT(1) NOT NULL default 0,
  `Notificationalerttime` int(11) NOT NULL DEFAULT 60,
  `Userdeleted` TINYINT(1) NOT NULL default 0,
  `Deleted` TINYINT(1) NOT NULL default 0,
  PRIMARY KEY (`UserId`, `CalendarId`),
  INDEX `CalendarId_idx` (`CalendarId` ASC),
  CONSTRAINT `CalendarId`
    FOREIGN KEY (`CalendarId`)
    REFERENCES `annualcycle`.`Calendar` (`CalendarId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

ALTER TABLE Usercalendars
ADD FOREIGN KEY (UserId) REFERENCES User(UserId)
	ON DELETE NO ACTION
	ON UPDATE NO ACTION;

-- -----------------------------------------------------
-- Table `annualcycle`.`Eventn`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `annualcycle`.`Eventn` ;

CREATE TABLE IF NOT EXISTS `annualcycle`.`Eventn` (
  `EventId` INT NOT NULL auto_increment,
  `Name` VARCHAR(45) NOT NULL,
  `Description` TEXT NULL,
  `Start` DATETIME NOT NULL,
  `End` DATETIME NULL,
  `Interval` CHAR NULL,
  `Deleted` TINYINT(1) NOT NULL default 0,
  PRIMARY KEY (`EventId`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `annualcycle`.`EventCalendar`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `annualcycle`.`EventCalendar` ;

CREATE TABLE IF NOT EXISTS `annualcycle`.`EventCalendar` (
  `EventId` INT NOT NULL,
  `CalendarId` INT NOT NULL,
  `Notificationsent` TINYINT(1) NOT NULL DEFAULT 0,
  `rw` TINYINT(1) NOT NULL DEFAULT 1,
  `Deleted` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`EventId`, `CalendarId`),
  INDEX `CalendarId_idx` (`CalendarId` ASC))
ENGINE = InnoDB;

ALTER TABLE EventCalendar
ADD FOREIGN KEY (EventId) REFERENCES Eventn(EventId)
	ON DELETE NO ACTION
	ON UPDATE NO ACTION,
ADD FOREIGN KEY (CalendarId) REFERENCES Calendar(CalendarId)
	ON DELETE NO ACTION
	ON UPDATE NO ACTION;

-- -----------------------------------------------------
-- Table `annualcycle`.`Task`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `annualcycle`.`Task` ;

CREATE TABLE IF NOT EXISTS `annualcycle`.`Task` (
  `TaskId` INT NOT NULL auto_increment,
  `Name` VARCHAR(45) NOT NULL,
  `Description` TEXT NULL,
  `Startdate` DATETIME NULL,
  `Interval` VARCHAR(512) NOT NULL,
  `Timestamp` BIGINT NULL,
  `CalendarId` INT NULL,
  `ParentId` INT NULL,
  `IsDone` TINYINT(1) NOT NULL default 0,
  `Deleted` TINYINT(1) NOT NULL default 0,
  PRIMARY KEY (`TaskId`))
ENGINE = InnoDB;

ALTER TABLE Task
ADD FOREIGN KEY (CalendarId) REFERENCES Calendar(CalendarId)
	ON DELETE NO ACTION
	ON UPDATE NO ACTION,
ADD FOREIGN KEY (ParentId) REFERENCES Task(TaskId)
	ON DELETE NO ACTION
	ON UPDATE NO ACTION;


-- -----------------------------------------------------
-- Table `annualcycle`.`Eventtask`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `annualcycle`.`Eventtask` ;

CREATE TABLE IF NOT EXISTS `annualcycle`.`Eventtask` (
  `EventId` INT NOT NULL,
  `TaskId` INT NOT NULL,
  `Deleted` TINYINT(1) NOT NULL default 0,
  PRIMARY KEY (`EventId`, `TaskId`),
  INDEX `TaskId_idx` (`TaskId` ASC),
  CONSTRAINT `EventId`
    FOREIGN KEY (`EventId`)
    REFERENCES `annualcycle`.`Eventn` (`EventId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `TaskId`
    FOREIGN KEY (`TaskId`)
    REFERENCES `annualcycle`.`Task` (`TaskId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `annualcycle`.`Files`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `annualcycle`.`Files` ;

CREATE TABLE IF NOT EXISTS `annualcycle`.`Files` (
  `FileId` INT NOT NULL auto_increment,
  `Filename` VARCHAR(100) NOT NULL,
  `Path` VARCHAR(100) NOT NULL,
  `Deleted` TINYINT(1) NOT NULL default 0,
  PRIMARY KEY (`FileId`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `annualcycle`.`EventFiles`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `annualcycle`.`EventFiles` ;

CREATE TABLE IF NOT EXISTS `annualcycle`.`EventFiles` (
  `EventId` INT NOT NULL,
  `FileId` INT NOT NULL,
  `Deleted` TINYINT(1) NOT NULL default 0,
  PRIMARY KEY (`EventId`, `FileId`),
  INDEX `FileId_idx` (`FileId` ASC))
ENGINE = InnoDB;

ALTER TABLE EventFiles
ADD FOREIGN KEY (EventId) REFERENCES Eventn(EventId)
	ON DELETE NO ACTION
	ON UPDATE NO ACTION,
ADD FOREIGN KEY (FileId) REFERENCES Files(FileId)
	ON DELETE NO ACTION
	ON UPDATE NO ACTION;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


-- When a user is deleted, remove everyting related to that user 

DELIMITER //
CREATE TRIGGER flagallusercontentdeleted AFTER UPDATE ON User
FOR EACH ROW
BEGIN
IF NEW.Deleted <=> "1" AND Old.Deleted <=> "0" THEN

	UPDATE Usercalendars
	SET Deleted = '1'
	WHERE userId = NEW.userId;

END IF;
END;//
DELIMITER ;

-- Incase you want to revocer a user, recover all content related to that specific user 

DELIMITER //
CREATE TRIGGER flagallusercontentrecovered AFTER UPDATE ON User
FOR EACH ROW
BEGIN
IF NEW.Deleted <=> "0" AND Old.Deleted <=> "1" THEN

	UPDATE Usercalendars
	SET Deleted = '0'
	WHERE userId = NEW.userId;
    
    
END IF;
END;//
DELIMITER ;


-- When an event is deleted, remove everyting related to that event 

DELIMITER //
CREATE TRIGGER flagalleventcontent AFTER UPDATE ON Eventn
FOR EACH ROW
BEGIN
IF NEW.Deleted <=> "1" AND Old.Deleted <=> "0" THEN

	UPDATE EventFiles
	SET Deleted = '1'
	WHERE EventId = NEW.EventId;
    
    UPDATE EventCalendar
	SET Deleted = '1'
	WHERE EventId = NEW.EventId;
    
	UPDATE EventFiles
	SET Deleted = '1'
	WHERE EventId = NEW.EventId;
    
END IF;
END;//
DELIMITER ;

-- When a file is deleted, remove everyting related to that file 

DELIMITER //
CREATE TRIGGER flagallfilecontent AFTER UPDATE ON Files
FOR EACH ROW
BEGIN
IF NEW.Deleted <=> "1" AND Old.Deleted <=> "0" THEN

	UPDATE EventFiles
	SET Deleted = '1'
	WHERE FileId = NEW.FileId;
    
    
END IF;
END;//
DELIMITER ;


-- When a calendar is deleted, remove everyting related to that calendar 

DELIMITER //
CREATE TRIGGER flagallcalendarcontent AFTER UPDATE ON Calendar
FOR EACH ROW
BEGIN
IF NEW.Deleted <=> "1" AND Old.Deleted <=> "0" THEN

    UPDATE EventCalendar
	SET Deleted = '1'
	WHERE CalendarId = NEW.CalendarId;
    
	UPDATE Usercalendars
	SET Deleted = '1'
	WHERE CalendarId = NEW.CalendarId;
    
END IF;
END;//
DELIMITER ;

-- When a task is deleted, remove everyting related to that task 

DELIMITER //
CREATE TRIGGER flagalltaskcontent AFTER UPDATE ON Task
FOR EACH ROW
BEGIN
IF NEW.Deleted <=> "1" AND Old.Deleted <=> "0" THEN
	
    
	UPDATE Eventtask
	SET Deleted = '1'
	WHERE TaskId = NEW.TaskId;
    
    
END IF;
END;//
DELIMITER ;

-- Raise error procedure

DROP PROCEDURE IF EXISTS raise_application_error;
DROP PROCEDURE IF EXISTS get_last_custom_error;
DROP TABLE IF EXISTS RAISE_ERROR;


DELIMITER //
CREATE PROCEDURE raise_application_error(IN CODE INTEGER, IN MESSAGE VARCHAR(255)) SQL SECURITY INVOKER DETERMINISTIC
BEGIN
  CREATE TEMPORARY TABLE IF NOT EXISTS RAISE_ERROR(F1 INT NOT NULL);

  SELECT CODE, MESSAGE INTO @error_code, @error_message;
  INSERT INTO RAISE_ERROR VALUES(NULL);
END;//

CREATE PROCEDURE get_last_custom_error() SQL SECURITY INVOKER DETERMINISTIC
BEGIN
  SELECT @error_code, @error_message;
END;//
DELIMITER ; 

-- Preventing the database for accepting delete statements

DELIMITER //
CREATE TRIGGER User_del BEFORE DELETE ON User
FOR EACH ROW
BEGIN
	CALL raise_application_error(-20001, "Records can not be deleted");
END;//
DELIMITER ;

DELIMITER //
CREATE TRIGGER Calendar_del BEFORE DELETE ON Calendar
FOR EACH ROW
BEGIN
	CALL raise_application_error(-20001, "Records can not be deleted");
END;//
DELIMITER ;

DELIMITER //
CREATE TRIGGER Eventn_del BEFORE DELETE ON Eventn
FOR EACH ROW
BEGIN
	CALL raise_application_error(-20001, "Records can not be deleted");
END;//
DELIMITER ;

DELIMITER //
CREATE TRIGGER EventCalendar_del BEFORE DELETE ON EventCalendar
FOR EACH ROW
BEGIN
	CALL raise_application_error(-20001, "Records can not be deleted");
END;//
DELIMITER ;

DELIMITER //
CREATE TRIGGER usercalendars_del BEFORE DELETE ON usercalendars
FOR EACH ROW
BEGIN
	CALL raise_application_error(-20001, "Records can not be deleted");
END;//
DELIMITER ;


DELIMITER //
CREATE TRIGGER eventtask_del BEFORE DELETE ON eventtask
FOR EACH ROW
BEGIN
	CALL raise_application_error(-20001, "Records can not be deleted");
END;//
DELIMITER ;

DELIMITER //
CREATE TRIGGER files_del BEFORE DELETE ON files
FOR EACH ROW
BEGIN
	CALL raise_application_error(-20001, "Records can not be deleted");
END;//
DELIMITER ;

DELIMITER //
CREATE TRIGGER eventfiles_del BEFORE DELETE ON eventfiles
FOR EACH ROW
BEGIN
	CALL raise_application_error(-20001, "Records can not be deleted");
END;//
DELIMITER ;

DELIMITER //
CREATE TRIGGER task_del BEFORE DELETE ON task
FOR EACH ROW
BEGIN
	CALL raise_application_error(-20001, "Records can not be deleted");
END;//
DELIMITER ;

-- Adding creation date for user

DELIMITER //
CREATE TRIGGER userjoindate BEFORE INSERT ON User
FOR EACH ROW
BEGIN
    SET New.Datecreated = NOW();
END;//
DELIMITER ;


