/*
	mf_timeline.js
	version			: 0.4.0
	last updated	: 08.11.2017
	name			: Markus Fjellheim
	description		:
		What does this do?
			This will manage timelines on the page.
		How to use it?
			TODO: ...
*/

function mf_TimelineHandler(){
	this.loops;
	this.fps;
	this.timelines;
}
var mf_timeline;

function mf_init(){
	mf_timeline = new mf_TimelineHandler();
	mf_timeline.loops = {};
	mf_timeline.fps = 30;
	mf_timeline.timelines = [];
}
function mf_addTimeline(element){
	var newTimeline = new Timeline(element);
	mf_timeline.timelines.push(newTimeline);
	mf_testHandeler.addRecordTimeline(newTimeline);
	return mf_timeline.timelines.length - 1; // index of the new timeline
}
// Task
function mf_Task(id, parentId, calendarId, name, interval, timestamp, width, height, isDone){
	this.id = id;
	this.parentId = parentId;
	this.calendarId = calendarId;
	this.name = name;
	this.interval = interval;
	// example:
	//	interval = \{
	//		yearInterval: {start: new Date("2018"), modulus = 2},
	//		monthInterval: null,
	//		monthNrInYear: null,
	//		weekInterval: {start: new Date("this week"), modulus = 2},
	//		weekNrInMonth: null,
	//		weekNrInYear: null,
	//		dayInterval: {start: new Date("today"), modulus = 2},
	//		dayNrInWeek: null,
	//		dayNrInMonth: 5,
	//		dayNrInYear: null
	//	}
	this.timestamp = timestamp;
	this.height = height;
	this.width = width;
	this.isDone = isDone;
	this.position = new Vec(0,0);
	this.targetPosition0 = new Vec(0,0);
	this.targetPosition1 = new Vec(0,0);
	
	this.children = [];
	this.level = 0;
}
mf_Task.prototype.copy = function(other){
	this.copyExceptPosition(other);
	this.position = Vec.newVec(other.position);
	this.targetPosition0 = Vec.newVec(other.targetPosition0);
	this.targetPosition1 = Vec.newVec(other.targetPosition1);
}
mf_Task.prototype.copyExceptPosition = function(other){
	this.id = other.id;
	this.parentId = other.parentId;
	this.calendarId = other.calendarId;
	this.name = other.name;
	this.interval = other.interval;
	this.timestamp = other.timestamp;
	this.height = other.height;
	this.width = other.width;
	this.isDone = other.isDone;
}
mf_Task.prototype.getRange = function(){
	return Tool.getNextInterval(new Date(Timeline.getTimeNow()), true, this.interval); // {start: startTime, end: endTime}
}
// Event
function mf_Event(start, end, name, color, repeatFunctions){
	this.id = Event.nrOfEvents;
	mf_Event.nrOfEvents++;
	
	this.start = start; // Unix milliseconds
	this.end = end; // Unix milliseconds
	this.nameBoxes = [{start:start, end:end}]; // list of x and y coordinates of possible name placements. Coordiantes are in Unix milliseconds
	this.name = name;
	this.color = color;
	this.repeatFunctions = repeatFunctions;
	
	this.verticalOffset = 0;
	this.collisionGroup = []; // all colliding events
}
mf_Event.nrOfEvents = 0;
mf_Event.prototype.getBiggestNameBoxInView = function(left, right){ // TODO: rename left, right
	// return index of the biggest index. -1 if none exist.
	var biggestIndex = -1;
	var biggestSize = 0;
	for(var i=0; i<this.nameBoxes.length; i++){
		var start = this.nameBoxes[i].start;
		var end = this.nameBoxes[i].end;
		start = Math.max(start, left);
		end = Math.min(end, right);
		var size = end - start;
		if(size > biggestSize){
			biggestSize = size;
			biggestIndex = i;
		}
	}
	return biggestIndex;
}
mf_Event.prototype.clipNameBoxes = function(otherStart, otherEnd){
	// will clip, remove or split nameBoxes by the range given as the argument.
	var originalLength = this.nameBoxes.length;
	for(var i=0; i<originalLength; i++){
		var bStart = this.nameBoxes[i].start;
		var bEnd = this.nameBoxes[i].end;
		if(otherEnd < bStart || bEnd < otherStart){ // no collision
			continue;
		}
		if(otherStart < bStart){
			if(bEnd < otherEnd){ // nameBox is completely inside the other Event
				this.nameBoxes.splice(i, 1);
				i--;
				originalLength--;
				continue;
			}else{
				this.nameBoxes[i].start = otherEnd;
				continue;
			}
		}else{
			if(bEnd <= otherEnd){
				this.nameBoxes[i].end = otherStart;
				continue;
			}else{
				this.nameBoxes[i].end = otherStart;
				this.nameBoxes.push({start:otherEnd, end:bEnd});
				continue;
			}
		}
	}
}
// Timeline
function Timeline(container){
	//this.zoom = 10; // how much time is visible
	//this.position = 0; // what time is centered
	//this.targetPosition = this.position; // what day is centered
	this.zoom = 1000 * 60 * 60 * 24 * 10; // 10 days // how much time is visible
	this.maxZoom = 1000 * 60 * 60 * 24 * 365 * 10; // 10 years
	this.minZoom = 1000 * 60 * 2; // 2 min
	this.position = Timeline.getTimeNow() + 0 * 1000 * 60 * 60 * 24 * 0.5; // what time is centered // "+" starts half a day behind
	this.targetPosition = this.position; // what day is centered
	
	this.tick = 0;
	this.loop = setInterval(this.loop.bind(this), 1000/mf_timeline.fps);
	this.container = container;
	this.id = container.id;
	this.isActive = false;
	
	// canvas
	this.canvas = document.createElement("canvas");
	
	// buttons
	this.initializeButtons();
	
	// re-size canvas
	//this.canvas.style.border = "1px solid black";
	this.reSizeToContainer();
	window.addEventListener("resize", this.reSizeToContainer.bind(this));
	container.innerHTML = "";
	container.appendChild(this.canvas);
	
	this.ctx = this.canvas.getContext("2d");
	
	// pc
	container.addEventListener("mousewheel", this.scroll.bind(this), false);
	container.addEventListener("mousemove", this.mouseMove.bind(this), false);
	container.addEventListener("mousedown", this.mouseDown.bind(this), false);
	container.addEventListener("mouseup", this.mouseUp.bind(this), false);
	container.addEventListener("mouseout", this.mouseUp.bind(this), false);
	this.mouseData = {
		pos: new Vec(),
		pos0: new Vec(),
		timeDown: 0,
		timeUp: 0,
		isDown: false
	};
	// mobile
	container.addEventListener("touchstart", this.touchStartOneFinger.bind(this), false);
	container.addEventListener("touchmove", this.touchMoveOneFinger.bind(this), false);
	container.addEventListener("touchend", this.touchEndOneFinger.bind(this), false);
	container.addEventListener("touchend", this.touchEndOneFinger.bind(this), false);
	this.touchList = [];
	for(var i=0; i<4; i++){
		this.touchList.push({
			x: 0,
			y: 0,
			x0: 0,
			y0: 0,
			xR: 0,
			yR: 0,
			id: 0,
			timeDown: 0,
			timeUp: 0,
			isDown: false
		});
	}
	// click
	container.addEventListener("click", function(){this.clicked = true;}.bind(this), false);
	this.clicked = false;
	//
	this.days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
	this.months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
	
	// fill data
	this.events = []; // visual events
	//this.loadDummyEvents();
	this.tasks = [];
	this.taskHeight = this.canvas.height * 0.1;
	
	// status
	this.status = Timeline.standard;
	this.startTime = 0;
	this.endTime = 0;
	this.taskToBePlaced;
	// // timeline/task mode
	this.mode;
	this.setTimelineView();
	
	// render data
	this.unitNameWidth = 100;
	this.unitNameHeight = 30;
	this.verticalRulerHeight = this.unitNameHeight * 6;
	
	// resolution functions
	this.resetTimeFuntion;
	this.incrementTimeFunction;
}
//
Timeline.standard = 0;
Timeline.addEventSetStart = 1;
Timeline.addEventSetEnd = 2;
// view mode
Timeline.timelineView = 0;
Timeline.taskView = 1;
Timeline.prototype.initializeButtons = function(){
	this.buttons = [];
	
	// addEvent button
	//this.addButton = new Button(new Vec(this.canvas.width * 0.8, this.canvas.height * 0.9), "Add event", new Color(200,50,50,1));
	//this.addButton.radius = 60;
	//this.addButton.shape = Button.circle;
	//this.addButton.callBack = this.addEventStart.bind(this);
	//this.buttons.push(this.addButton);
	this.cancelActivationChange = false;
	
	// change to task view button
	this.changeViewButton = new Button(new Vec(this.canvas.width * 0.5, this.canvas.height * 0.95), "Change to \'task view\'", new Color(200,50,50));
	this.changeViewButton.shape = Button.square;
	this.changeViewButton.width = this.canvas.width * 1;
	this.changeViewButton.height = this.canvas.height * 0.2;
	this.changeViewButton.callBack = function(thisButton){
		if(this.mode == Timeline.timelineView){
			this.setTaskView();
		}else if(this.mode == Timeline.taskView){
			this.setTimelineView();
		}else{
			Tool.printError("Mode not recognized.");
			return -1;
		}
		var name1 = "Change to \'task view\'";
		var name2 = "Change to \'timeline view\'";
		if(thisButton.name == name1){
			thisButton.name = name2;
		}else{
			thisButton.name = name1;
		}
	}.bind(this, this.changeViewButton);
	this.buttons.push(this.changeViewButton);
	
	// confirm placacement of events
	this.confirmEventPlacementButton = new Button(new Vec(this.canvas.width * 0.5, this.canvas.height * 0.95),
		"Confirm start time of your event", new Color(200,50,50));
	this.confirmEventPlacementButton.shape = Button.square;
	this.confirmEventPlacementButton.width = this.canvas.width * 1;
	this.confirmEventPlacementButton.height = this.canvas.height * 0.2;
	this.confirmEventPlacementButton.callBack = function(thisButton){
		var name1 = "Confirm start time of your event";
		var name2 = "Confirm end time of your event";
		if(thisButton.name == name1){
			thisButton.name = name2;
			this.status = Timeline.addEventSetEnd;
		}else{
			thisButton.name = name1;
			thisButton.visibility = false;
			this.changeViewButton.visibility = true;
			this.status = Timeline.standard;
			
			var range = this.taskToBePlaced.getRange();
			mf_AjaxHandler.ajaxPost({
				calendarId: this.taskToBePlaced.calendarId,
				eventName: this.taskToBePlaced.name,
				start: this.startTime,
				end: this.endTime
			}, "/addNewEvent", function(r){
				var isSuccess = JSON.parse(r).isSuccess;
				if(isSuccess == null){
					Tool.printError("Wrong format in response from url: \"/addNewTask\".\n" +
						"Expected {isSuccess: true/false}, but recieved " + JSON.parse(r) + ".");
					return -1;
				}
				if(!isSuccess){
					Tool.printError("New task could not be placed.");
					return -1;
				}
				
				mf_AjaxHandler.ajaxPost({taskId: this.taskToBePlaced.id}, "/setTaskDone", function(r){
					this.taskToBePlaced.isDone = true;
					
					this.loadTasks();
					this.loadEvents();
					this.setTaskView();
				}.bind(this));
			}.bind(this));
		}
	}.bind(this, this.confirmEventPlacementButton);
	this.confirmEventPlacementButton.visibility = false;
	this.buttons.push(this.confirmEventPlacementButton);
}
Timeline.prototype.setTimelineView = function(){
	if(this.mode == Timeline.timelineView){
		return;
	}
	this.mode = Timeline.timelineView;
	this.loadEvents();
}
Timeline.prototype.setTaskView = function(){
	if(this.mode == Timeline.taskView){
		return;
	}
	this.mode = Timeline.taskView;
	this.loadTasks();
}
Timeline.prototype.reSizeToContainer = function(){
	
	var oldWidth = this.canvas.width;
	var oldHeight = this.canvas.height;
	// resize canvas
	var style = getComputedStyle(this.container);
	this.canvas.width = this.container.clientWidth
		- parseFloat(style.paddingRight) - parseFloat(style.paddingLeft);
	this.canvas.height = this.container.clientHeight
		- parseFloat(style.paddingTop) - parseFloat(style.paddingBottom);
	// resize buttons
	for(var i=0; i<this.buttons.length; i++){
		this.buttons[i].pos.x *= this.canvas.width / oldWidth;
		this.buttons[i].pos.y *= this.canvas.height / oldHeight;
	}
}
Timeline.prototype.loadTasks = function(){
	mf_AjaxHandler.ajaxPost({calId:13}, "/getTasks", function(r){
		var response = JSON.parse(r);
		//{
		//	tasks: [
		//		{
		//			id: id,
		//			name: name,
		//			interval: interval,
		//			deleted: deleted,
		//			isDone: sDone,
		//			parentId: parentId,
		//			calendarId: calendarId,
		//			timestamp: timestamp
		//		},
		//		{...}
		//	]
		//}
		
		// enterpet input
		if(response == null || response.tasks == null || response.tasks.length == null){
			Tool.printError("Wrong task format.");
			return -1;
		}
		var newTasks = [];
		for(var i=0; i<response.tasks.length; i++){
			var inT = response.tasks[i];
			
			var interval;
			try{
				eval("interval = " + inT.interval);
			}catch(err){
				interval = null;
			}
			if(!interval){
				Tool.printError("Wrong interval format.");
				continue;
			}
			var newTask = new mf_Task(inT.id, inT.parentId, inT.calendarId, inT.name, interval, inT.timestamp,
				this.canvas.width * 0.5, this.taskHeight, inT.isDone);
			newTasks.push(newTask);
		}
		
		// add root tasks
		this.tasks = [];
		for(var i=0; i<newTasks.length; i++){
			var nt = newTasks[i];
			if(!nt.parentId){
				this.tasks.push(nt);
				newTasks.splice(i,1);
				i--;
				continue;
			}
		}
		
		// // remove root tasks outside of interval
		for(var i=0; i<this.tasks.length; i++){
			var t = this.tasks[i];
			var range = t.getRange();
			var timeNow = Timeline.getTimeNow();
			if(range.start > timeNow || range.end <= timeNow){
				this.tasks.splice(i, 1);
				i--;
			}
		}
		
		// add children of root tasks
		var layer = Tool.copyArray(this.tasks);
		var temp = [];
		while(true){
			for(var i=0; i<layer.length; i++){
				var t = layer[i];
				for(var j=0; j<newTasks.length; j++){
					var nt = newTasks[j];
					if(nt.parentId == t.id){
						t.children.push(nt);
						newTasks.splice(j,1);
						j--;
						temp.push(nt);
					}
				}
			}
			if(temp.length == 0){
				break;
			}
			layer.push(temp);
			temp = [];
		}
		
		// reset and update timestamp on root tasks
		for(var i=0; i<this.tasks.length; i++){
			var t = this.tasks[i];
			var range = t.getRange();
			if(t.timestamp < range.start){
				mf_AjaxHandler.ajaxPost({taskId:t.id}, "/resetTasks", function(task){
					task.isDone = false;
					resetChildren(task);
					function resetChildren(task){
						for(var i=0; i<task.children.length; i++){
							var c = task.children[i];
							c.isDone = false;
							resetChildren(c);
						}
					}
				}.bind(this, t));
			}
		}
		
		// adjust height of tasks
		adjustHeight(null, this.tasks, 0);
		function adjustHeight(parent, tasks, level){
			for(var i=0; i<tasks.length; i++){
				var t = tasks[i];
				adjustHeight(t, t.children, level + 1);
				
				if(parent != null){
					t.height = parent.height / parent.children.length;
					t.level = level;
				}
			}
		}
	}.bind(this));
}
Timeline.prototype.loadEvents = function(){
	mf_AjaxHandler.ajaxPost({start: 0, end: 1000 * 60 * 60 * 24 * 360 * 1000}, "/loadViewEvents", function(responseText){
		// {events:[{start, end, name, repeatData},{start,...},...]}
		
		//repeatdata = \{
		//	year: null/{m, r}, // null or modulus and rest
		//	month: null/{m, r, perY/perM},
		//	week: null/{m, r, perY/perM/perW}
		//	day: null/{m, r, perY/perM/perW/perD}
		//	hour: null/{m, r}
		//	minute: null/{m, r}
		//	second: null/{m, r}
		//\}
		var eventData = JSON.parse(responseText).events;
		if(!eventData){
			Tool.printError("Wrong format in response from server on /loadViewEvents");
			return -1;
		}
		
		this.events = [];
		for(var i=0;i<eventData.length;i++){
			var e = eventData[i];
			/*if(e.repeatData){
				var repeatFunctions = [];
				
				if(e.repeatData.year){
					repeatFunctions.push(function(date){Tool.resetDateTo(date,Tool.year)});
				}
			}*/
			this.events.push(new mf_Event(
				start = e.start,
				end = e.end,
				name = e.name,
				color = Tool.randomColor(1)//,
				//repeatFunctions = repeatFunctions
			));
		}
		this.calcuateEventCollisions();
		
	}.bind(this));
}
Timeline.prototype.loadDummyEvents = function(){
	this.events = [
		new mf_Event(
			start = new Date(2017, 8, 17, 0, 0).getTime(),
			end = new Date(2017, 8, 19, 0, 0).getTime(),
			name = "LAN",
			color = "red"
		),
		new mf_Event(
			start = new Date(2017, 8, 18, 0, 0).getTime(),
			end = new Date(2017, 8, 20, 0, 0).getTime(),
			name = "Festival",
			color = "green"
		),
		new mf_Event(
			start = new Date(2017, 8, 19, -11, 0).getTime(),
			end = new Date(2017, 8, 20, -11, 0).getTime(),
			name = "Prepare for exam",
			color = "turquoise"
		),
		new mf_Event(
			start = new Date(2017, 8, 20, 9, 0).getTime(),
			end = new Date(2017, 8, 20, 13, 0).getTime(),
			name = "Exam",
			color = "blue"
		)
	];
	
	
	var str = "var rdn = [";
	for(var i=0; i<2000; i++){
		str += i==0? "" : ",";
		str += Math.random();
	}
	str += "];";
	//console.log(str);
	
	var rdn = [0.671909481762847,0.09301495417738881,0.17628130591102686,0.41472450921646997,0.4611934127939308,0.9386927030682941,0.13171259713527328,0.0994478284689877,0.4090667291728669,0.3989464013257973,0.837761011538894,0.647770666958561,0.5068058439579977,0.7288625411648944,0.4308560316541743,0.8728988111867613,0.5155297724656636,0.9759085966146284,0.8188845639139974,0.35614925530416963,0.9427520507542262,0.15688521439857728,0.6005667294322383,0.36181001848419325,0.68276142095023,0.46845438033817954,0.5680557256391625,0.32287406902909255,0.02692297623775919,0.8950775681402827,0.6937401559201342,0.8868463140787199,0.3468433196607599,0.3001004870743862,0.6276997104665678,0.6754523979472622,0.7886918480800189,0.4622477202570714,0.818791381353088,0.11573733149642385,0.8189346209228785,0.12244562507233248,0.37917400371063303,0.983282360757785,0.21235721142999764,0.698227461005396,0.10450212518674729,0.27097283300658126,0.6112316197579017,0.38282596691274184,0.052842465425551044,0.5557189162486296,0.14533238161383877,0.3746358992537331,0.8577484011667742,0.6324674600030986,0.29206698280960963,0.3395411606095262,0.11794960262544318,0.9163729076286455,0.8357088665075012,0.9809346099179859,0.3104589067169228,0.9114227587322106,0.32601843293993027,0.09929795877770298,0.5968020368185427,0.4513239803473652,0.9494471351161518,0.35446144589876183,0.3285596438193279,0.32693426188197794,0.031126608014090174,0.9015004328463159,0.9792398374018609,0.9687632458403672,0.0921109758318781,0.8047740078557373,0.02958408848825078,0.6197379142998996,0.14572557112759665,0.6648357240594238,0.9076016639273232,0.9248035163050365,0.3453019454910884,0.7793425788744894,0.6945423182139177,0.49339111293233406,0.5593073642776047,0.605198914555702,0.4905781097916775,0.4540824201017284,0.14687619182991574,0.8674335999241407,0.6350475662994535,0.13131241612143274,0.2531038241147969,0.08106208544556526,0.38348252219027557,0.8316099317147123,0.2732834749934596,0.7015897316318016,0.45831892846340994,0.5354095818165683,0.5562657681751182,0.5111014281031685,0.2535477499404766,0.5402570625925647,0.040861516932747755,0.5417786759268999,0.9385819967893714,0.7382667938475,0.8071560823577415,0.008575799490868175,0.8324454571769972,0.6207519677373858,0.7781102659625907,0.5307039187228848,0.19959421108095476,0.25947864025600675,0.39216831041019984,0.1543434888584827,0.6318195312601071,0.5357171530571943,0.37246043275301455,0.7735939305273687,0.5659590094667413,0.8158377382450208,0.36072218836511616,0.24624990832231441,0.7590893356450417,0.4076964985229743,0.9734388357186641,0.47605014244712063,0.9479032249521135,0.2901006133051067,0.8315890418388157,0.8371111429538471,0.6470482194900191,0.10387804528950406,0.5678882556998135,0.7956356496595094,0.6551696731224714,0.18395795720621666,0.7089496955045289,0.851299198387085,0.931246373858317,0.12647270745389871,0.40192425734241866,0.4236207053482466,0.14566124738657504,0.16030143619099557,0.7318010584314929,0.927879111457083,0.7079059466534552,0.40965722483143696,0.5311153512139364,0.02472092580834029,0.2915969119415531,0.7528409381421934,0.4983006781786843,0.01563879603820717,0.6541349683942106,0.7761101853116639,0.19932592627746315,0.250638117243136,0.644757559542033,0.5114071487489962,0.4530998963256001,0.6950931860493477,0.5482468874047832,0.4630294243082511,0.14791677970797523,0.6882556668379802,0.1501414359656923,0.1365215363723402,0.15158940210353555,0.6222873434749221,0.8175641756754857,0.0023818371430637253,0.022607343559658544,0.37015075438259215,0.9743443276391281,0.11021167517967823,0.5087227072648233,0.6272614862998902,0.6833950477858644,0.19116199159179947,0.24301549820829327,0.3232758311223918,0.8387899091503057,0.23022994016516174,0.2141741035731044,0.23120584954982615,0.4920672807094215,0.10581053994309753,0.8069103763777172,0.5061696535932425,0.2692730914457866,0.7003742503145567,0.6806657602506623,0.8423413791628334,0.05571018295153207,0.8157868861487363,0.6873660887570403,0.384448230056635,0.22290855465634385,0.202659266958515,0.8243263476618163,0.1761929301182894,0.40200973052651134,0.6729997925197793,0.9604298384397878,0.08316246006314398,0.22594128433013805,0.47027460520631137,0.013872176085784504,0.4585018271605097,0.8706525080534535,0.10002865667018379,0.9028608424076929,0.8844262022532496,0.4151873096145635,0.4099886576363574,0.14362605417341867,0.08120180593330728,0.3870825259103181,0.8960882029407087,0.4646951010133147,0.15094178207241682,0.16370922065456628,0.014233742996281107,0.9049340515549527,0.834167946900155,0.14017859386747356,0.6752428897453722,0.9813104199668174,0.516699281558791,0.5685590558674125,0.21891275515373465,0.7558625180951886,0.679019610600549,0.6948160829571906,0.10444284053560882,0.4330326355145533,0.3250205491084466,0.3913769102982403,0.3535984485820578,0.5234424345414435,0.6054743312264124,0.4826667742972375,0.7663115389871518,0.7680733815930862,0.5638767441544423,0.013104102762975467,0.6597243308162899,0.7699011122739032,0.6058233375184097,0.3691255407647016,0.3135258478297587,0.5595388261460945,0.9151078882078898,0.9703659587413616,0.5803838434009567,0.6840412095048196,0.9739914686228497,0.8892403215992581,0.2226492662811297,0.18387789417971856,0.09736596139131759,0.4219768704219864,0.6306183719533445,0.5404903716202911,0.560796451993532,0.5278395983981601,0.353156632449539,0.4655875722422498,0.8214362086945686,0.36648730561936405,0.11605685209980221,0.4745388678142253,0.18691347018110327,0.3244505643526563,0.055410371257425206,0.05296688129416194,0.16920175342894206,0.2771329094112418,0.34096422766615553,0.8123166232226298,0.20339797637315482,0.120381673510632,0.2500719560302509,0.17942154141280398,0.8884544006623205,0.20060175550061965,0.2919967070689473,0.42501404336829474,0.8828739214621584,0.688983055249563,0.230007721002778,0.08495531309044768,0.6993530799547447,0.27385198187954285,0.32442614539515247,0.7767107078979405,0.4140709678034302,0.8859524382118855,0.49751007416204596,0.670298923899024,0.49143627879187624,0.8024099569349075,0.7767609379850104,0.9143500386956986,0.5024971694544891,0.4661951165045968,0.6315309038185906,0.5180654806192075,0.6974449386581956,0.5545722711301215,0.3322080064019324,0.20411184089891843,0.01369734203267714,0.7656560036664388,0.8981356463238146,0.9991648028300046,0.34801778245458204,0.6127419197591104,0.8901649269083893,0.43130225929661825,0.2292072848767972,0.7003735156311082,0.7415963710031714,0.30695858978102764,0.14137751529966391,0.5365248113951278,0.6467082239713249,0.16856490651695988,0.49984561267282945,0.989300406916938,0.6433263838518521,0.9517847638553856,0.20883321249426468,0.1005335918102539,0.31392722089277014,0.8423669477760052,0.23106458297794097,0.7072287427792203,0.8719052862427781,0.6607567681953681,0.6806602350789064,0.5369723496332741,0.9405373276313624,0.193143156930897,0.6697347687605901,0.5403539321176367,0.9873315251179537,0.12027589018643758,0.370485392503652,0.32305251539234536,0.8508669851067265,0.7962963915094841,0.21903469846173174,0.9664090202146336,0.1031029994270305,0.7872069623726907,0.7855236978545888,0.6880454819572703,0.00435996694274654,0.6648071599390328,0.29547412638133363,0.22629111740654406,0.10157628646762662,0.21334840048529746,0.029060901662709027,0.03164468362644435,0.5309224743046719,0.8781239539127317,0.5262755241417219,0.2953973306589799,0.3029198145390366,0.5247846351325198,0.07536355747519519,0.5152834687769337,0.9610280371553368,0.08442382405030924,0.994504675370907,0.322916221862223,0.32572042922585687,0.7482307869245506,0.019054642665584653,0.3400040959880506,0.5127497710054545,0.2241666272322611,0.2476781051787207,0.5883620306396118,0.8567299247093862,0.4781601667641697,0.8561315231021289,0.3898867383811324,0.7546969317517178,0.7113683972614808,0.6310591498293925,0.27544463918619955,0.2568462654281982,0.5638099212094636,0.9488252858982753,0.3588622700888704,0.39504122497429073,0.6829926513741773,0.46839933885105856,0.45126191384833847,0.31876118998622194,0.24521963282247405,0.593405089813829,0.47450007208962,0.8056521528590403,0.7602586083747696,0.3355395913025332,0.3059851646515672,0.9179849556028188,0.7435363578314083,0.8170441373591988,0.13364948876522553,0.5816166731490164,0.0004924175778047157,0.8697442475820998,0.15270879530328152,0.7253524583287849,0.6871143441089769,0.05999146764487828,0.34452581731718745,0.19861303705881683,0.7267899983802371,0.04143911711153114,0.9255396052705966,0.08704939142417856,0.30293391821888904,0.6620416873425736,0.8870652358533162,0.8554744270836845,0.7085042881806238,0.6408961749031084,0.04323913144432723,0.6202971517563722,0.5804936898253512,0.18342909431745613,0.38601335649827817,0.689266141856794,0.9589675168339669,0.3174790196117976,0.7877742910917562,0.3077810811229582,0.8703514478672285,0.7765121543186755,0.02711390282461057,0.10942496881783903,0.005726925303858987,0.972291464138084,0.2521320327937058,0.5032884210320683,0.08259071665524664,0.22368123159860032,0.697313005968887,0.2872246158353393,0.41252980884347057,0.27439423375318883,0.7727937584991813,0.6759777868383998,0.7633968755345357,0.3715437241669379,0.15175124024826236,0.5879631992770491,0.10701158798343835,0.760455815683186,0.7516304147864015,0.7544673379313238,0.1585555482524823,0.4770913344650298,0.01197128521546853,0.013154564412742431,0.4823983283463944,0.9585054545895644,0.0732836000460999,0.9014566284560919,0.8121317617265635,0.034836398255698064,0.9222117016721865,0.26085631763272166,0.4851593837586783,0.8646615004208202,0.3799446833537994,0.7949244053857767,0.5686118409661594,0.265526709915725,0.6365263542502877,0.6942074512213636,0.8261722501396391,0.1557154826448297,0.7217249112107238,0.22540949543208533,0.2404789639499998,0.9361773265892113,0.3475977904031531,0.2149536383999513,0.6882275116649357,0.7446103353422426,0.5325102228953791,0.29996925469193947,0.5229727907472819,0.9462018340252409,0.7660625938800618,0.5210143132120311,0.08759948300063192,0.8309093454744763,0.660822171745507,0.27043811202314405,0.854242356676989,0.17738577535645983,0.9264063134737446,0.4807337846570299,0.7986977974464566,0.5881096159271342,0.9224767250009802,0.03429155732830047,0.0672087609056069,0.3315135908462803,0.2481065191311851,0.6649036099449199,0.044392481589236255,0.7383799221214817,0.20089143621999428,0.3623369767444491,0.81627346818689,0.5817141074958576,0.3150653278248441,0.6258089358355785,0.20720491947867226,0.14575786447758388,0.402099412466667,0.2976896779477529,0.29745169157532114,0.9025087516447208,0.24705298239579365,0.9521705401418177,0.8749424427343053,0.711725440240599,0.9009301586308047,0.06266443463660187,0.9991682975958243,0.2717061836815218,0.7998117832126888,0.890326542482631,0.15789755363569213,0.4796772420408557,0.06755820013911995,0.46721433078390984,0.31349696584737075,0.16563774003260923,0.4013719212613067,0.035767661237110726,0.33335771527287195,0.5821215261993433,0.40865334267765574,0.6855476039199118,0.7223605439092733,0.9882594311831117,0.6211764418453725,0.05273754354277638,0.711877330386091,0.796150075133977,0.6721952381672651,0.10699578905912244,0.07384939648131117,0.22204646568697428,0.6816789264066285,0.3983105352412508,0.7231824386220573,0.9436501709524354,0.6364381873849112,0.3297081730874374,0.35434074113891634,0.8080348704891356,0.9005148946067758,0.32752295827464994,0.7895084452394565,0.0010418779507186393,0.7214253554893177,0.40789608005365774,0.7049374580785004,0.46909620471637137,0.6667107214021699,0.29576981414989456,0.6945945080767004,0.5219710047989312,0.6425987697052171,0.2002440556345919,0.12683875226573904,0.8168905251254974,0.5829765625016747,0.050307247338977845,0.49230288988982296,0.5668326485154316,0.1574101357871125,0.728901226729086,0.9612144384962222,0.6835446932947458,0.7409821720311638,0.21562931901184235,0.15950455323842228,0.011980524427914752,0.4582467535943642,0.8402856369222949,0.050596223604708834,0.009308005541577735,0.6698135451222227,0.21384673301490942,0.2518120017628034,0.2553153966402095,0.38867391281467834,0.8727430963067675,0.4556192355682731,0.9776419222994366,0.6721732441445321,0.9483198346096782,0.9401553055401572,0.050363532094647834,0.7170164121290385,0.0957683817180166,0.9187900439467571,0.42069777584294066,0.40821885109254996,0.025203110730450007,0.5624431412095434,0.7546906641135764,0.15980959398883066,0.19561206200794512,0.8549868835763539,0.5302606070560314,0.1600205240529422,0.9722949670685852,0.3857006374672036,0.20024648144715518,0.24682598607181427,0.06344973916934671,0.6909799407474033,0.4791455895820176,0.8326042638229936,0.26907477948798575,0.32444544329583946,0.14294908518805927,0.39496582358245047,0.4954963058991064,0.24743340979997352,0.5857836806825718,0.6429532211351894,0.21960795695957835,0.41152497159098966,0.15566086182749062,0.659665510517482,0.3696682831349418,0.0075063926563185834,0.9503501285087117,0.2998510402543322,0.07590137883090753,0.3208866809504096,0.20700872547002214,0.7898463166263336,0.9825914984763042,0.8960916057636104,0.8679289746918166,0.20290616709335674,0.11147187383207524,0.08673063854840879,0.03614618865173669,0.27765218396837343,0.8232869921387789,0.5255578769918141,0.8458903889283322,0.16977737246948976,0.16189117321076196,0.36030782792896576,0.492354687106328,0.809291403309633,0.9683441511201338,0.32310505486689745,0.7071278414760396,0.8175795586557899,0.5226476741186554,0.9769775003670944,0.7401812929338667,0.5197329213575237,0.5996256068868742,0.12069341830843316,0.5242304787754353,0.25670181275791903,0.8634930385342154,0.45434401725222084,0.00452666787242495,0.8527025822738881,0.078199537210772,0.1430569972283373,0.803455325038154,0.16386360263408006,0.4984566319476118,0.853921112458226,0.5776264709189749,0.16658275370796916,0.9818118095112904,0.30540257528880455,0.6066251054975,0.2314541423135481,0.5069188635081523,0.7761462344432883,0.7664944524893105,0.15113649881501723,0.5404149051263183,0.2918476293182415,0.7078314918675355,0.9374218334221782,0.17951439666016467,0.4521848132435291,0.5590922263613609,0.9141682171923731,0.6814436419926422,0.9808079336301507,0.3110036859959626,0.7464534575278761,0.004438215975313797,0.5548991813865889,0.3032058755501945,0.896732911678056,0.8928500670462984,0.21732843317209882,0.48641820669577296,0.39358864739937327,0.068321575350629,0.6365710525983115,0.5865276113033024,0.9022039256108614,0.5008695065290094,0.8764305988697545,0.15928554214170032,0.05208024682759227,0.6754976342474732,0.25196347559880694,0.016961600121514486,0.7515110951373516,0.47557196177245675,0.1807589044715736,0.8174843371677667,0.958857454720843,0.7657176994077608,0.665617124838618,0.685209128032042,0.5347475412171605,0.7342560445011155,0.6517023421210342,0.09441687803075194,0.9150810820097688,0.25466412985019304,0.9823211254448263,0.8261969032494374,0.9879047722637073,0.8226733983611649,0.16062978622709934,0.3796507169693035,0.8234088622674254,0.3957877095915441,0.5868604190005069,0.8330876103757585,0.16959299040935738,0.7641516090230445,0.7652928055434145,0.6448329524087204,0.8379674910968731,0.3095467435157637,0.3056254031365857,0.20068440431472467,0.4164865611576596,0.13582693727795303,0.9010433044075774,0.08009364531306429,0.6311468402805227,0.4749544607200593,0.9349214962453034,0.3060257291790025,0.3319176448354122,0.15814508541195504,0.8657515157619688,0.12931449138581064,0.1840455550711788,0.9123233091757299,0.7915211679319041,0.33032088518944147,0.0034610652088244986,0.6402815601370899,0.3713109130718981,0.7489820679289731,0.7402523313360863,0.8787329327100688,0.8784678255553549,0.4256117980506957,0.7802375284001493,0.31042945138006206,0.22579548352051249,0.32824094351415156,0.7846571079471576,0.5662782238583579,0.24485223389894162,0.9523699540524295,0.8027173391040918,0.6885165932465822,0.9730912502127049,0.15698956183602997,0.24888801017158535,0.7119089211610314,0.8906163636600539,0.13843369064918942,0.5837740432149006,0.3511557635740008,0.5518182410492578,0.3010507946884595,0.7004538714832655,0.36833322348284225,0.5682197891025789,0.3814562327440796,0.49215941911196914,0.28020975738203524,0.40780972075191046,0.7497553395095533,0.8903809711134254,0.36015629410380323,0.4155484485835428,0.33853880704518136,0.533425824326893,0.42631557730908054,0.6929603913144085,0.8615907301996846,0.40830561619133454,0.6843617737314598,0.47269394414300847,0.785589934984037,0.7657265146057857,0.7692784919380244,0.9016987805554253,0.6822054866322909,0.4780774346429413,0.5006057458260837,0.9479019749850914,0.6877899449345475,0.04315731414314361,0.5347722709176295,0.4282825215563322,0.16711858421390446,0.6540714986068763,0.5394635237953203,0.9009635512234371,0.21295015314122345,0.16669679781269098,0.6865955302858828,0.6184903299723887,0.758437984482198,0.870590181487489,0.5602171316896409,0.253120114677746,0.6225423917839117,0.4270650112008396,0.5239117397508513,0.6300405808057596,0.8351703112670643,0.9551863344700218,0.8653741762400045,0.03873850554544922,0.25018931772288977,0.553089040466789,0.6397189542689503,0.8945130306902407,0.4516003204394372,0.2461475952774983,0.2697162050781936,0.8560738941632973,0.5835351943159177,0.8354941446546986,0.5294223119612937,0.1807540140473447,0.1652389207635545,0.9483616462048339,0.6587894133638743,0.20897656836836842,0.9816523230155823,0.6882932261895256,0.26242155759802177,0.9347921709772544,0.873943106729042,0.13211978300520721,0.28062975317251726,0.8257304059633768,0.8122424786383542,0.3684640488941744,0.23127165953779794,0.7144291584966953,0.5700147559447621,0.5700228992921996,0.12362863138942748,0.7443099405181921,0.15163081731366512,0.3930649750783284,0.918558215727036,0.43968619015871235,0.15098194607103177,0.1387029360953338,0.06534817295889495,0.06540359624913883,0.3166080499676547,0.3270027706320944,0.6345079675536878,0.6584397433629825,0.925648496841482,0.7278648030937469,0.16316856773861832,0.5923657366069071,0.6591657099258452,0.8623576568151365,0.02860533134472698,0.7638343120883788,0.5724626600986047,0.6794518686337447,0.7990273570595785,0.1914716860896617,0.11008004685304118,0.19411289337446136,0.6507709988487103,0.3467084614609037,0.614754175307183,0.6369747957274365,0.8042330090092435,0.9748087880377643,0.0731872421787303,0.9647016672893833,0.9946774385049273,0.17476950041129125,0.4807206636195307,0.7993333931114861,0.5525815771663829,0.6440049554205014,0.845219942274744,0.1397188694835647,0.22508535372135285,0.003826246349666551,0.5898519999273351,0.12352758258610774,0.7464823356545838,0.9464927978566506,0.2913609486763675,0.15059063003843542,0.8354545882042772,0.3496431991715885,0.06043857680108555,0.8170820639636622,0.8639777433469893,0.543380082366576,0.8905862325348846,0.37649560409139626,0.005310354715188037,0.2352517094936839,0.10387248943532712,0.8346930772351207,0.8519349257052102,0.48139661212128004,0.803503010132463,0.3493826410698362,0.4338297685010004,0.3886149337165625,0.6161581393463054,0.5749897018552608,0.21096393528177537,0.6247286773190253,0.8809908376994287,0.039568868998195006,0.25046072513786766,0.6179951537187689,0.5769129761598979,0.08185232947995225,0.45826076090648105,0.4256481855259311,0.3961465896849423,0.3481133766564195,0.6967093043330335,0.6744074031977738,0.19799079245580042,0.7651094486107666,0.15985261080506996,0.04274768181820732,0.8444767399494564,0.04581168046170214,0.9508834170543385,0.6984919552602347,0.19064228730751753,0.360107197141595,0.03006463348678956,0.8399915487114458,0.571740958393437,0.7116486980296277,0.9217915261429781,0.1320558838411947,0.4190380906805953,0.5839908979171722,0.7009603988595319,0.16877350703714367,0.5921009615355386,0.3008620595845042,0.48623926550579877,0.1919281481920576,0.24157827882671357,0.32823539339590346,0.6550116030045436,0.30819296423120957,0.7877607482564113,0.740589528555597,0.898442499579557,0.35978770893151624,0.1204019347892662,0.579403690346477,0.9098272249909356,0.12681650271271994,0.9442683776178429,0.258445223241901,0.3107218728373564,0.6127551585418067,0.04439637246550854,0.8395877298510483,0.9306882229400839,0.19019446219436031,0.3685129007380361,0.5085816181575262,0.39511010111005596,0.5278070725564263,0.1916680397145516,0.8686310387108414,0.5098649173753742,0.34298201669403117,0.19988123934837176,0.4527829492792099,0.7627790592506167,0.09763273172801124,0.07569697118509455,0.27352426233115,0.6235181573630424,0.2479832289643047,0.5838875798543592,0.9525440296711458,0.377500485659507,0.6211264803938523,0.8468175425897635,0.2854905246245578,0.8475264167932426,0.9152063893345104,0.7838288139752465,0.43745095336252104,0.3856168694813511,0.41425922817398075,0.9389565941659221,0.4325072583467331,0.22065432740871604,0.6685266989431653,0.46641480761211285,0.6291016599521113,0.3063292639030806,0.8544458430370172,0.6402916874045037,0.07490452796814684,0.1363867739074034,0.4689894112913704,0.8094577158191947,0.5360731103786565,0.5441301243361951,0.055884725754612896,0.5086671112854984,0.13089291369774236,0.37904867594010394,0.8862383473248372,0.9503943398935089,0.8897563621005784,0.7698758803370804,0.07929734529641874,0.6951873785734637,0.06976681430550769,0.2893669534173964,0.7551791046206062,0.3728040542669744,0.8643218000624422,0.33180012666796754,0.7888239226306724,0.1632394724514612,0.7460872346564327,0.3985459444146442,0.9174909907864117,0.11052401100540865,0.6628854036547274,0.301917227028355,0.33415756133198404,0.65922577912893,0.888339825812529,0.876367550834869,0.23975112984754787,0.2175795599004322,0.8551175423153523,0.5948294630589357,0.5383296340564712,0.5603489129801813,0.8674340569593726,0.5505431033595729,0.946537096671952,0.36323072601005824,0.5586369219816225,0.8917217498678438,0.5571104053969369,0.8645290932966279,0.6209908936203856,0.22135553692602383,0.5800694194012475,0.5416660235477508,0.4879302380979891,0.6166748132848898,0.7605529573823455,0.9409748560674709,0.02455855991409095,0.14986670741530084,0.46044237603931704,0.09666742984418075,0.9494665202272583,0.15032491830688,0.12451661350013499,0.35926459912144404,0.604104803436285,0.4149085040684546,0.1519119520211658,0.03458934144890913,0.8101381093689564,0.8406497312434937,0.3289250635429637,0.7830274569994298,0.6223964896418444,0.026710130202892923,0.5321103183756148,0.19859567877782558,0.8623166906337609,0.4982272062809925,0.48114432700108645,0.7161280221302129,0.26031899630621935,0.8844585616695051,0.4600413675898267,0.4619707910276387,0.7882617520212558,0.28804715733242947,0.07425648994550538,0.584147374123658,0.506813409330183,0.9509543224420445,0.020653913417173264,0.3213208621971375,0.12671250734378048,0.9132577954207171,0.8494703876075498,0.9015346807412232,0.962174537344173,0.5237708857643493,0.9388265147884154,0.40356481502047514,0.8871933707195958,0.8939253505584408,0.5343174321777973,0.3152508042740718,0.05434325409513252,0.3495613784831373,0.93670983422605,0.06040816254838499,0.5944639905243181,0.5286425237475103,0.24989945489853893,0.0526891003176464,0.8319737810154482,0.8245667168571713,0.14832542393669734,0.8006476707645476,0.4372316243570671,0.9517646483879048,0.9470564619442334,0.08332369122266736,0.31033994910471674,0.9971465153802788,0.29916994432963673,0.4689573312780684,0.8753444348820836,0.7160281142746403,0.6938596149397116,0.5579407841927033,0.5159589485830454,0.000047197259624320864,0.34032000594875034,0.15170198013133906,0.7798504814041178,0.30649873060993693,0.3388724109059029,0.1908897334977051,0.50226668726537,0.38312947291993904,0.9008355153598977,0.23712760492451346,0.14736691686183723,0.7565124278642126,0.3996002410345465,0.8791829038485635,0.6817222243907264,0.22439257211718044,0.35672328598987946,0.4518803751968006,0.7748678440346897,0.25773150412187795,0.6924925814475211,0.7485626107588115,0.024314886053804496,0.12738023664254006,0.5766121795457093,0.30654825783754136,0.421324248521864,0.7417915606161352,0.5051232925752891,0.9132042868867338,0.8455848052672157,0.9078075907767227,0.9474059536854089,0.3996564863105265,0.7608798504636092,0.6002039013980969,0.06511804159430201,0.1403669833266068,0.8003825292405544,0.8956200135793415,0.8451633607371811,0.7192690658436627,0.48054967987360997,0.48871246346058994,0.9713919181958499,0.5768631642954265,0.3625673937470397,0.5005750907889261,0.23366009063857085,0.4468425289666831,0.4064054208761101,0.25522167168069254,0.3741809744843001,0.934446208741468,0.8513776561425785,0.2852526699078717,0.7541176900701663,0.9751301413888025,0.016432199724892627,0.809513355085081,0.8414738273798605,0.4886378754852141,0.7447172304252954,0.6336813716485448,0.46653481213370385,0.3254693121269818,0.3622283331512175,0.6511271733099269,0.009878539377415452,0.5340829951231563,0.8174397698593625,0.8693274139575249,0.32400748228210463,0.22995021668816307,0.24002594906885655,0.965947515280267,0.9933598920984437,0.05073581964121687,0.12110016697681214,0.5964183215177941,0.6646791918038624,0.9269285654412918,0.7801008799048144,0.015701162567769877,0.21470630154476256,0.6763830735029157,0.6333384308688406,0.9224903586794861,0.5683060153799155,0.2943751335405487,0.23496800933514428,0.773406822156907,0.7588618032678642,0.45000464087023473,0.7014763379235429,0.13192249884543705,0.687073380250314,0.6510874073822328,0.26695349108820343,0.2833380580730942,0.8672415166202383,0.0721417098169499,0.5553359648634075,0.6868348879259452,0.8687925050385621,0.4423390326770562,0.7268818119065248,0.09359333675960158,0.8912271858699081,0.9002605811075528,0.7193384665494114,0.530014492403851,0.7868145725648532,0.4490650688365643,0.9812608158111416,0.7552563874296323,0.15897620532151469,0.28046773297613026,0.9001391823625289,0.48399846232941,0.9327788015050338,0.222325652979664,0.5090254237721912,0.22200084589046853,0.13379706875584718,0.5572817739833436,0.3960521248090527,0.21362288366514814,0.5663301648361805,0.18717111984876844,0.5217382887374138,0.9299548382430818,0.2037553573211548,0.8006007123941263,0.1756110807927127,0.20840141356048258,0.6796483564294111,0.3646448643809892,0.6563021874837591,0.4861377575036925,0.05333944901941012,0.878970348242023,0.6375709397966272,0.9423288924457887,0.042487890870611666,0.2603559742139858,0.44609406466281376,0.4219874455188579,0.08609106271847922,0.3195060088279673,0.09963749439496827,0.7987620895741951,0.9821685832165556,0.982235455336238,0.28982135024483613,0.03432293744172554,0.36956171609665955,0.5159162504577139,0.13077378889294766,0.2880361796362172,0.8623901386502921,0.7926855346410269,0.6622087771188421,0.8714650896398102,0.7051452692227673,0.2605631428709223,0.4694642520730663,0.9402140022509988,0.3935613434329499,0.7331931842977994,0.5106321450944256,0.4445271873799026,0.1784407169424287,0.8456959894775462,0.18023902390389823,0.7116990214306027,0.4950537619335069,0.06140657949878481,0.611084101037561,0.07696515522417191,0.6578967497472874,0.19825603119826374,0.8912798281942105,0.6375665903980121,0.23252517083093416,0.8708165629766005,0.20129042108046669,0.745268719186172,0.6189348577059797,0.6678053357788116,0.36747477152251795,0.768220920627656,0.864371833236443,0.4269966392838025,0.7199049275315874,0.5890316098052906,0.9853917479754815,0.39632856586109266,0.15814815143261463,0.19336981455176527,0.4195791573274088,0.9998135860600681,0.4241576408700163,0.7083582629942149,0.7702001967973258,0.2979297979732456,0.21670957729909923,0.7776625851250405,0.5349602655725187,0.721879599243876,0.8768775826294819,0.11684990277378793,0.28468921681594983,0.7140128100981842,0.8200586466020372,0.5902047729494486,0.304752282312601,0.7593421119204731,0.42925691984862224,0.62207212329106,0.37429557051401385,0.5233422489625801,0.8348853195460595,0.5829377641916518,0.7217352346582915,0.009018613591584401,0.05481733035182779,0.7416639535199845,0.3115421968151242,0.3812520282610543,0.8186750118312065,0.5506961211768164,0.46718302614666984,0.9095522184738782,0.5426748797126553,0.9449142568213431,0.01986722881246905,0.47481007563536903,0.7183732688070843,0.013812032015372955,0.7183321185094522,0.014439622548016562,0.49543843534593845,0.8096180737552281,0.10258052357368896,0.4203376921493627,0.2909938002643886,0.5915673625422089,0.6455221495527803,0.06444859569439565,0.9057056367106575,0.5614981333594913,0.5263922378557786,0.6867837003603723,0.9952846506269979,0.10363724341551417,0.8628635715819801,0.8016980970799119,0.2497803240363392,0.5681989053679486,0.3216819877222017,0.5563766693764047,0.268017154784308,0.5260169132102792,0.08942153225681815,0.48753380319815,0.8084253838822313,0.8265383821434364,0.45184343355534917,0.09237903291247429,0.7874735193225761,0.13898188924024968,0.08942923898520783,0.3854278812332179,0.22337711262572046,0.04712322799845481,0.41764474984454036,0.9225583469556695,0.6021573428169862,0.3833196489365227,0.23991554598196085,0.5598946558720854,0.6737398364564677,0.5589356932809357,0.12726375470555729,0.9826466866239514,0.5922267126733096,0.5251517416783174,0.6344442027120574,0.05211680702984833,0.9990410301118755,0.5445676351764175,0.9871060220452585,0.8039559906004157,0.5775827461583454,0.5541255150126168,0.19524404091155945,0.14617675370173067,0.23965379976408774,0.8067134359290145,0.5906500924735754,0.9340024187290557,0.4824935955725673,0.15638388676940984,0.15871588202399134,0.28922310537523677,0.13384020372748173,0.5061723172971917,0.9291345413149092,0.684054937628761,0.8563976734434129,0.08230186724358357,0.42034880249350604,0.5265686434421135,0.09977459909258024,0.6370018487286087,0.48033103818161416,0.051961873082783994,0.3107585007531859,0.8523625018359855,0.35597648535009796,0.04164950781967369,0.03656632588111708,0.6144736229678003,0.2882137021760751,0.997032024566844,0.33655111581202046,0.11525834580037353,0.06577745477818064,0.2585634405347714,0.42911449457560624,0.26377381275171374,0.9997029144486438,0.20981914265212098,0.7637585304583088,0.29805281739187905,0.45115506383852755,0.05941891224070095,0.6699864342002564,0.4568341481735445,0.08497174441215605,0.01969808898912717,0.787673877740537,0.5482364733275107,0.20390767527205922,0.22601765071680258,0.2515522570969737,0.6821896839478663,0.8749478406190845,0.0029410381526184803,0.008134600216764376,0.7283710058230148,0.4713589850065849,0.4812718932447484,0.07335733572735981,0.20773102044311953,0.30935778161302374,0.558915422300257,0.7115898588196834,0.3466949671215822,0.48285935292583804,0.47149116737561014,0.5348914289577866,0.0032606203186407168,0.9360987610954401,0.18173667873442834,0.9707175216496229,0.7513526797710608,0.2263873300850856,0.920944534577701,0.21814174094759298,0.6851574628101329,0.3225819793779352,0.6608182175532975,0.6631106970999847,0.7472075937382547,0.5903865703341,0.39019637801014073,0.3638819969750282,0.39980403665488695,0.3586430904410345,0.030017801640143782,0.13835697870849284,0.6721880205815187,0.332926757992112,0.8830054692118223,0.4944049216794071,0.4690144234719402,0.680066861255507,0.012668469056390519,0.48932443053736385,0.5860521758156667,0.9097381898838328,0.547548675067961,0.3480977612044649,0.9618667550402156,0.6929724421391352,0.8985563802782586,0.6463304114248567,0.7795786911686551,0.7362093134929069,0.10394022164014527,0.26149939039154657,0.3080116364118668,0.11726998451176351,0.6052142688610913,0.5710370619318366,0.1260710794126667,0.1666467944141592,0.21560674616291098,0.7067301153760752,0.10935313867517804,0.13197670958422347,0.5633133460990947,0.7993027701095119,0.2024799738341636,0.1100960626908507,0.12568283615329423,0.35806943867011776,0.9789981538410288,0.2659106999743477,0.5031283829458995,0.5429745552103571,0.25494894931469836,0.9819230189606525,0.004875149691907055,0.964539171928239,0.358693081390167,0.20282700120422414,0.5367523125409008,0.3533799612537545,0.9725380063118472,0.7227153643615951,0.9713938487973981,0.004235298654354125,0.5324502592990099,0.9400993179262129,0.5904687876300605,0.8483033084911833,0.3656102838391624,0.48986700605552413,0.32286081687307044,0.16564519966367608,0.4240333526571829,0.299670229071213,0.4108156657312019,0.3356536914751955,0.5690962725459707,0.40497339235520613,0.19717268415960199,0.9572594382990669,0.5875446569877141,0.5138083837632106,0.5941543947903207,0.8923338876813838,0.7515659865624769,0.27782560218050967,0.7161868610531936,0.7617377439294417,0.023944498714252305,0.2634577748714064,0.606257362402415,0.3349469883788474,0.5193710349547325,0.4599007036677951,0.4863008816869696,0.38134665214879826,0.6289552772352085,0.7595157038331095,0.7254171255447768,0.5362108858173966,0.3394412438941672,0.5983923560331508,0.4562511825248825,0.22155365486921186,0.850802126867551,0.4368013053074018,0.4343855512172272,0.3808801707744942,0.6115813725376147,0.06705247262366631,0.6578893414997595,0.9176176626222099,0.33697117341084404,0.1568231277495522,0.3532150303630881,0.1422101042430759,0.6559140530283918,0.20032902655196816,0.07468004209710943,0.5906844492465793,0.28711310062414386,0.33341129029956185,0.09987033038576354,0.39303238662304496,0.4528054190573767,0.9110208564221083,0.2779004208680973,0.8118561535981468,0.8806570792496757,0.2818793122356378,0.8489505146183645,0.5898791572544604,0.6124527600726504,0.01402259129047656,0.7137122543532961,0.10512000870725569,0.20914101035568988,0.10953831529720692,0.03319598433276805,0.23964174712004027,0.3799237417837895,0.7830413079074694,0.6831061434843828,0.4494128812407907,0.24945074316833926,0.35271739182665685,0.18402113907288142,0.8442678557676393,0.32142541480752995,0.9850958007348698,0.5685409424854428,0.7093814463460109,0.4321159997650741,0.8234294755734679,0.3847845648368502,0.31935700449712523,0.06859527246592623,0.2946944787288024,0.09617592487883386,0.5513988428113372,0.30278048144305525,0.8369929233591284,0.5568867358169256,0.47078654016858557,0.4742259312310513,0.8307093709554683,0.31636637104663823,0.8509123783981141,0.35200833610268467,0.536305274137489,0.5029369979229272,0.43432396993003586,0.45885604531214974,0.5626210638481719,0.7061261423176073,0.5021913299958893,0.16020257852195496,0.9758043815103337,0.2882331261976774,0.9514399627245953,0.20158582610960973,0.31568754279373956,0.7782095639547695,0.6545167498118929,0.7589890814732936,0.5530621503683864,0.5592123566900511,0.32150288603827715,0.24800055199440463,0.8001600077318758,0.8148340100468898,0.6695053164573508,0.9622461654911825,0.8233316286301728,0.014084231326609853,0.32237242082242745,0.952980323409097,0.21988267158446972,0.030469924913814284,0.6886369120794988,0.5700740320805229,0.8002210663688534,0.6461048753347942,0.2701114829599516,0.02626628680871912,0.2228016204008565,0.17328530812055787,0.6867800034773197,0.18587358803849807,0.8522571069366294,0.6704947980646789,0.3953918761490369,0.9025877216472735,0.46950543222171914,0.7089760161127967,0.563219138402884,0.18685546885664284,0.6418203117485302,0.39478922679529993,0.22179252132361604,0.889199144553593,0.0359916537520919,0.05952192375258347,0.9011430839088603,0.7891583413447247,0.8397564825786614,0.8348185948124733,0.8942767999105676,0.2709367160835545,0.945238419255577,0.8752398213301431,0.07534370947841795,0.27395977719741627,0.2894396278463649,0.8743867735803681,0.5751100784522933,0.09501429027701924,0.04326207181723318,0.11505124920863241,0.10190581948900612,0.6810986163118875,0.6159110111300068,0.4806691009860993,0.780772457240426,0.20806371176456606,0.6124348989726653,0.3971253624518234,0.05538519236119721,0.7443160781042408,0.6143280370270032,0.01765407539517949,0.08676507423894741,0.21073955460976457,0.30383918179418634,0.9166763484110605,0.9377435864509558,0.28636393164661067,0.17801085773712644,0.7634819868805467,0.6949955700097561,0.06130303645333868,0.1283699597557164,0.37237986079501373,0.002036658914798428,0.4718978602389343,0.8330176617489233,0.5182138982065885,0.09299157888496712,0.774265982542732,0.11762983129065385,0.1375759577340112,0.9557355719622216,0.0591368466679838,0.2019552773372597,0.47460367206287346,0.9363155852151628,0.9604366447916703,0.8417212757732526,0.114356308081762,0.6392600952136804,0.6451201866132525,0.4522636495611929,0.39359752549030125,0.9145897595714076,0.3843281108142742,0.21014985190887336,0.5203828116639257,0.866199185967397,0.9086033915698366,0.039058432931597054,0.9407176113758082,0.7765037862015001,0.5634275056465521,0.18279190333109963,0.5056327313143927,0.1796493718780776,0.1817047003453076,0.6668598291169239,0.8894883806752323,0.10581241514908424,0.6651796659074705,0.9326289135778738,0.8790718330215253,0.9952858613222597,0.5272026794077085,0.5797355204253662,0.1402311191903245,0.1602136063345303,0.7789113198081834,0.21852333513873545,0.8272915652737647,0.7071344135403794,0.8916947816753671,0.9877096658023512,0.600149212857763,0.6511040962923005,0.067204595511694,0.13311066022462348,0.37961187242645056,0.31015037735771833,0.05980650912877894,0.2937886214082037,0.8135127517453897,0.8947383891574816,0.3690563031804963,0.6817587073453175,0.7372876917629403,0.07468652210980786,0.259756544164093,0.3319628448934213,0.22907829795817292,0.48356245243497487,0.974898005779417,0.16477158979524997,0.7393821511718854,0.6550683757993312,0.548271339828609,0.5294262297720429,0.9825975879216817,0.3091069868663867,0.19797088472843716,0.05226389986715052,0.6319842058609186,0.7384269657445492,0.39340594955011965,0.9436806717105104,0.9585360835293237,0.16141854024478697,0.804879466734765,0.18161017165758886,0.5361793244198685,0.26529232385126233,0.7902100088275421,0.490321387278422,0.10192043606105505,0.04640715513094307,0.8357778931018245,0.8784165398256183,0.5863332100722081,0.3090774225327446,0.4466442954344314,0.4632943631570652,0.3033965640248917,0.17380599242558237,0.9885112756198071,0.9089426799684353,0.10842799474943576,0.2995322533427698,0.5077840176683972,0.9827395954743385,0.4744515430317,0.12117378342150964,0.4475186963553406,0.2004881059579664,0.20670562906534085,0.5726653152734156,0.6373236338188728,0.23013927582409366,0.1334082391695781,0.5968899795124143,0.6317227712706168,0.9248833486067554,0.2508533234597403,0.3948746236523728,0.13093185159948062,0.007931619844526505,0.25140925062865827,0.8220980083448373,0.9380611141580455,0.9133211724699051,0.7025116391264872,0.298929633815443,0.9640634208863967,0.18759948161593942,0.7198829038502061,0.5984018806668432,0.6257566501033509,0.8905352789317891,0.4264110504801115,0.6307518672065979,0.3678053701602908,0.20376530864310927,0.19933281758085353,0.8919619745391403,0.3642996036080923,0.4457478575725533,0.5066115441493015,0.7183885927454996,0.834585559478823,0.9812407291810448,0.2670946276533621,0.8516655483427316,0.7597980678945009,0.607405488658936,0.5801746223748838,0.09669627587244056,0.4126409739405248,0.052262404328676126,0.8209525118776921,0.14090262290176225,0.1464477850121284,0.10167352470737145,0.3824115475538916,0.19760824648271513,0.7846840685652996,0.4261715246886497,0.632491353654751,0.8750463493881304,0.7620552158795504]
	
	
	var origo = Timeline.getTimeNow();
	for(var i=0; i<50; i++){
		var radius = Math.pow(rdn[i * 2], 0.5) * 1000 * 60 * 60 * 24 * 2 + 1000 * 60;
		var t = origo + (0.5 - rdn[i * 2 + 1]) * 1000 * 60 * 60 * 24 * 100;
		this.events.push(new mf_Event(
			start = new Date(t - radius).getTime(),
			end = new Date(t + radius).getTime(),
			name = "event nr:" + mf_Event.nrOfEvents,
			color = Tool.randomColor(1)
		));
	}
	this.calcuateEventCollisions();
}
Timeline.prototype.calcuateEventCollisions = function(event){
	// reset all
	for(var i=0; i<this.events.length; i++){
		var e = this.events[i];
		e.verticalOffset = 0;
		e.nameBoxes = [{start:e.start, end:e.end}];
		e.collisionGroup = [e];
	}
	// horizontal offset
	// // create collision groups
	var collisionGroups = []; // 2d array of colliding objects
	for(var i=0; i<this.events.length; i++){
		var e1 = this.events[i];
		for(var j=i+1; j<this.events.length; j++){
			var e2 = this.events[j];
			if(e1.end > e2.start && e1.start < e2.end){ // is colliding
				// remove old group(s)
				var index;
				if((index = collisionGroups.indexOf(e1.collisionGroup)) != -1){
					collisionGroups.splice(index, 1);
				}
				if((index = collisionGroups.indexOf(e2.collisionGroup)) != -1){
					collisionGroups.splice(index, 1);
				}
				// create new group
				var newGroup = e1.collisionGroup;
				if(e2.collisionGroup != e1.collisionGroup){
					newGroup = newGroup.concat(e2.collisionGroup);
				}
				// assign group
				for(var k=0; k<newGroup.length; k++){
					newGroup[k].collisionGroup = newGroup;
				}
				collisionGroups.push(newGroup);
			}
		}
	}
	// // calculate offset
	var offset;
	for(var i=0; i<collisionGroups.length; i++){
		var group = collisionGroups[i];
		offset = 0
		// calculate offsets
		for(var j=0; j<group.length; j++){
			var e = group[j];
			var isCollision = false;
			for(var k=j - 1; k >= 0; k--){
				var eOther = group[k];
				if(e.end > eOther.start && eOther.end > e.start){
					isCollision = true;
					break;
				}
			}
			if(isCollision){
				offset++;
			}
			e.verticalOffset = offset;
		}
		// center
		for(var j=0; j<group.length; j++){
			var e = group[j];
			e.verticalOffset -= (offset - 1) * 0.5;
		}
	}
	
	// name boxes
	for(var i=0; i<this.events.length; i++){
		var e1 = this.events[i];
		for(var j=i+1; j<this.events.length; j++){
			var e2 = this.events[j];
			if(e1.end > e2.start && e1.start < e2.end){ // is colliding
				// name box calculation
				if(/*e1.end > e2.start && e2.end > e1.start*/true){ // if there is vertical collision. TODO: make it work
					if(e1.id > e2.id){ // highest id is on top
						e2.clipNameBoxes(e1.start, e1.end);
					}else{
						e1.clipNameBoxes(e2.start, e2.end);
					}
				}
			}
		}
	}
}
Timeline.prototype.loop = function(){
	this.tick++;
	
	//
	this.checkButtons();
	
	// calcuate motion
	this.position = (this.targetPosition - this.position) * 0.2 + this.position;
	
	// status
	this.handleStatus();
	
	// render
	this.renderAndControlTheMode();
	
	// calcuate touchMotion
	this.globalControls();
	
	// handle status
	//this.handleStatus();
	
	// endstuff
	this.endCycle();
}
Timeline.prototype.endCycle = function(){
	// mouse and touch
	// // touch timing calculations
	for(var i=0; i<this.touchList.length; i++){
		var t = this.touchList[i];
		t.x0 = t.x;
		t.y0 = t.y;
		if(t.isDown){
			t.timeDown++;
		}else if(t.timeUp != 0){
			t.timeUp++;
		}
	}
	// // mouse timing calculations
	this.mouseData.pos0 = Vec.newVec(this.mouseData.pos);
	if(this.mouseData.isDown){
		this.mouseData.timeDown++;
	}else if(this.mouseData.timeUp != 0){
		this.mouseData.timeUp++;
	}
	// //
	this.clicked = false;
	// //
	this.cancelActivationChange = false;
}
Timeline.prototype.handleStatus = function(){
	if(this.status == Timeline.standard){
		
	}else if(this.status == Timeline.addEventSetStart || this.status == Timeline.addEventSetEnd){
		this.setTimelineView();
		// detect click
		if(this.mouseClicked() && !this.cancelActivationChange){
			var time = this.canvasCoordsToTime(this.mouseData.pos.x);
			
			var date = new Date(time);
			this.resetTimeFuntion(date);
			var t0 = date.getTime();
			this.incrementTimeFunction(date);
			var t1 = date.getTime();
			
			if(this.status == Timeline.addEventSetStart){
				this.startTime = Math.abs(t0 - time) < Math.abs(t1 - time)? t0: t1;
			}else if(this.status == Timeline.addEventSetEnd){
				this.endTime = Math.abs(t0 - time) < Math.abs(t1 - time)? t0: t1;
			}else{
				Tool.printError("\"this.status\" is not recognized.");
			}
		}
	}
}
Timeline.prototype.checkButtons = function(){
	if(this.isActive && this.mouseClicked()){
		for(var i=0; i<this.buttons.length; i++){
			var button = this.buttons[i];
			if(!button.visibility){
				continue;
			}
			switch(button.shape){
				case Button.circle:
					if(Vec.lgth(Vec.sub(button.pos, this.mouseData.pos)) <= button.radius){
						button.callBack();
						this.cancelActivationChange = true;
						return;
					}
					break;
				case Button.square:
					if(Math.abs(this.mouseData.pos.x - button.pos.x) < button.width * 0.5 &&
						Math.abs(this.mouseData.pos.y - button.pos.y) < button.height * 0.5){
						button.callBack();
						this.cancelActivationChange = true;
						return;
					}
					break;
			}
		}
	}
}
Timeline.prototype.addEventStart = function(){
	this.status = Timeline.addEventSetStart;
	this.addButton.name = "Confirm start";
	this.addButton.shape = Button.square;
	this.addButton.width = 250;
	this.addButton.height = 100;
	this.addButton.callBack = this.addEventConfirmStart.bind(this);
}
Timeline.prototype.addEventConfirmStart = function(){
	this.status = Timeline.addEventSetEnd;
	this.addButton.name = "Confirm end";
	this.addButton.shape = Button.square;
	this.addButton.width = 250;
	this.addButton.height = 100;
	this.addButton.callBack = this.addEventConfirmEnd.bind(this);
}
Timeline.prototype.addEventConfirmEnd = function(){
	if(this.startTime > this.endTime){
		this.addButton.name = "Start must be after end";
		return;
	}
	this.status = Timeline.standard;
	this.addButton.name = "Add event";
	this.addButton.shape = Button.circle;
	this.addButton.radius = 60;
	this.addButton.callBack = this.addEventStart.bind(this);
	var newEvent = new mf_Event(
		start = this.startTime,
		end = this.endTime,
		name = "event nr:" + mf_Event.nrOfEvents,
		color = Tool.randomColor(1)
	);
	this.events.push(newEvent);
	this.calcuateEventCollisions();
	//mf_AjaxHandler.ajaxPostForm({start: newEvent.start, end: newEvent.end, name: newEvent.name}, "/addEvent", function(response){alert(response);});
}
Timeline.prototype.renderAndControlTheMode = function(){
	// // clear
	this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
	
	// // render content
	if(this.mode == Timeline.timelineView){
		this.timelineControls();
		this.renderTimeline();
	}else if(this.mode == Timeline.taskView){
		this.taskControls();
		this.renderTaskView();
	}else{
		Tool.printError("Timeline mode not found.");
	}
	
	// // render buttons
	this.renderButtons();
	
	// render overlay
	if(this.status == Timeline.addEventSetStart || this.status == Timeline.addEventSetEnd){
		// // draw selection rulers
		var position = this.timeToCanvasCoords(this.startTime);
		this.drawLine(position, 0, position, this.canvas.height, "red", width = 3);
		
		if(this.status == Timeline.addEventSetEnd){
			position = this.timeToCanvasCoords(this.endTime);
			this.drawLine(position, 0, position, this.canvas.height, "green", width = 3);
		}
	}
	
	// // draw filter
	if(!this.isActive){
		this.drawBox(0, 0, this.canvas.width, this.canvas.height, color = Tool.rgba(255,255,255,0.5), fill = true, width = 0);
	}
}
Timeline.prototype.renderTaskView = function(){
	// calculate target positions
	calcPosition(this.canvas, null, this.tasks);
	function calcPosition(canvas, parent, tasks){
		for(var i=0; i<tasks.length; i++){
			var t = tasks[i];
			
			if(parent != null){
				t.targetPosition1 = new Vec(canvas.width * 0.1 + parent.width + t.width * 0.5,
					parent.targetPosition1.y + parent.height * 0.5 - t.height * 0.5 - t.height * i);
			}else{
				t.targetPosition1 = new Vec(canvas.width * 0.1 + t.width * 0.5, (canvas.height - t.height * 1.5) - t.height * i);
			}
			calcPosition(canvas, t, t.children);
		}
	};
	// move towards target positions
	calcMovement(this.tasks);
	function calcMovement(tasks){
		for(var i=0; i<tasks.length; i++){
			var t = tasks[i];
			calcMovement(t.children);
			
			var movementSpeed = 0.1 * Math.pow(1.2, 1); // TODO: fix 1 to faster the more left
			t.targetPosition0 = Vec.lerp(t.targetPosition0, t.targetPosition1, movementSpeed);
			t.position = Vec.lerp(t.position, t.targetPosition0, movementSpeed);
		}
	};
	// render
	renderTask(this, this.tasks);
	function renderTask(that, tasks){
		var allIsDone = true;
		for(var i=0; i<tasks.length; i++){
			var t = tasks[i];
			var isDone = renderTask(that, t.children) && (t.isDone || t.children.length > 0);
			allIsDone = allIsDone && isDone;
			
			// background
			var color1;
			if(isDone){
				color1 = new Color(200,200,200);
			}else{
				color1 = new Color(100,255,100);
			}
			color2 = Color.mulRGB(color1, 0.8);
			that.drawRectOutline(t.position.x - t.width * 0.5, t.position.y - t.height * 0.5,
				t.position.x + t.width * 0.5, t.position.y + t.height * 0.5,
				color1, color2, 1);
			// name
			that.drawText(t.name, t.position.x, t.position.y, new Color(255,255,255));
		}
		return allIsDone;
	};
}
Timeline.prototype.renderTimeline = function(){
	
	// debug
	for(var i=0; i<this.touchList.length; i++){
		var t = this.touchList[i];
		this.drawText ("id: " + t.id + " yPos: " + t.y, t.x, t.y);
		this.drawText ("x", t.x, t.y);
	}
	
	// render events
	this.renderEvents(this.canvas.height, this.verticalRulerHeight);
	
	// render date structure
	this.renderDateStructure();
}
Timeline.prototype.renderButtons = function(){
	for(var i=0; i<this.buttons.length; i++){
		this.drawButton(this.buttons[i]);
	}
}
Timeline.prototype.renderDateStructure = function(){
	var offset = 0;
	// // year
	this.drawUnit(this.unitNameHeight, "YEAR", this.unitNameWidth, offset,
		function getNameFunction(date){
			return date.getFullYear();
		},
		function resetTimeFuntion(date){
			Tool.resetDateTo(date, Tool.year);
		},
		function incrementTimeFunction(date){
			Tool.incrementDateTo(date, Tool.year, 1);
		}
	);
	offset += this.unitNameHeight;
	// // month
	this.drawUnit(this.unitNameHeight, "MONTH", this.unitNameWidth, offset,
		function getNameFunction(date){
			return this.months[date.getMonth()];
		}.bind(this),
		function resetTimeFuntion(date){
			Tool.resetDateTo(date, Tool.month);
		},
		function incrementTimeFunction(date){
			Tool.incrementDateTo(date, Tool.month, 1);
		}
	);
	offset += this.unitNameHeight;
	// // week
	this.drawUnit(this.unitNameHeight, "WEEK", this.unitNameWidth, offset,
		function getNameFunction(date){
			var date2 = new Date(date.getTime());
			date2.setMilliseconds(0);
			date2.setSeconds(0);
			date2.setMinutes(0);
			date2.setHours(0);
			date2.setDate(1);
			date2.setMonth(0);
			var weekNumber =  Math.floor((date.getTime() - date2.getTime()) / 1000 / 60 / 60 / 24 / 7) + 1;
			
			return "week " + weekNumber;
		}.bind(this),
		function resetTimeFuntion(date){
			Tool.resetDateTo(date, Tool.week);
		},
		function incrementTimeFunction(date){
			Tool.incrementDateTo(date, Tool.week, 1);
		}
	);
	offset += this.unitNameHeight;
	// // day
	this.drawUnit(this.unitNameHeight, "DAY", this.unitNameWidth, offset,
		function getNameFunction(date){
			return this.days[date.getDay()] + " #" + date.getDate();
		}.bind(this),
		function resetTimeFuntion(date){
			Tool.resetDateTo(date, Tool.day);
		},
		function incrementTimeFunction(date){
			Tool.incrementDateTo(date, Tool.day, 1);
		}
	);
	offset += this.unitNameHeight;
	// // hour
	this.drawUnit(this.unitNameHeight, "HOUR", this.unitNameWidth, offset,
		function getNameFunction(date){
			var hours = date.getHours().toString();
			if(hours.length == 1){
				hours = "0" + hours;
			}
			return hours + ":00";
		}.bind(this),
		function resetTimeFuntion(date){
			Tool.resetDateTo(date, Tool.hour);
		},
		function incrementTimeFunction(date){
			Tool.incrementDateTo(date, Tool.hour, 1);
		}
	);
	offset += this.unitNameHeight;
	// // minute
	this.drawUnit(this.unitNameHeight, "Minute", this.unitNameWidth, offset,
		function getNameFunction(date){
			var minutes = date.getMinutes().toString();
			if(minutes.length == 1){
				minutes = "0" + minutes;
			}
			return "" + ":" + minutes;
		}.bind(this),
		function resetTimeFuntion(date){
			Tool.resetDateTo(date, Tool.minute);
		},
		function incrementTimeFunction(date){
			Tool.incrementDateTo(date, Tool.minute, 1);
		}
	);
	offset += this.unitNameHeight;
}
Timeline.prototype.renderEvents = function(eventSpaceTop, eventSpaceBottom){
	for(var i=0; i<this.events.length; i++){
		var e = this.events[i];
		// is outside of view
		if(e.end < this.position - this.zoom * 0.5 || e.start > this.position + this.zoom * 0.5){
			continue;
		}
		// draw box
		var boxHeight = this.canvas.height * 0.3;
		var verticalPosition = e.verticalOffset * (eventSpaceTop - eventSpaceBottom) * 0.05 +
			(eventSpaceTop + eventSpaceBottom) * 0.5;
		var bottom = verticalPosition - boxHeight * 0.5;
		var top = verticalPosition + boxHeight * 0.5;
		var left = this.timeToCanvasCoords(e.start);
		var right = this.timeToCanvasCoords(e.end);
		this.drawBox(left, bottom,
			right, top,
			e.color, true, 1);
		// calcuate name placement
		var xPos, yPos, orientation, opacity;
		var font = "24px Arial";
		var nameHeight = parseInt(font);
		var nameWidth = Tool.widthOfString(e.name, font);
		
		var visibleLeft = Math.max(left, 0);
		var visibleRight = Math.min(right, this.canvas.width);
		var visibleLength = visibleRight - visibleLeft;
		
		var nameBoxIndex = e.getBiggestNameBoxInView(this.canvasCoordsToTime(0), this.canvasCoordsToTime(this.canvas.width));
		var nameBoxLeft, nameBoxRight;
		var visibleNameBoxLeft, visibleNameBoxRight, visibleNameBoxLength;
		if(nameBoxIndex != -1){
			nameBoxLeft = this.timeToCanvasCoords(e.nameBoxes[nameBoxIndex].start);
			nameBoxRight = this.timeToCanvasCoords(e.nameBoxes[nameBoxIndex].end);
			visibleNameBoxLeft = Math.max(nameBoxLeft, 0);
			visibleNameBoxRight = Math.min(nameBoxRight, this.canvas.width);
			visibleNameBoxLength = visibleNameBoxRight - visibleNameBoxLeft;
		}
		// name placement and orientation
		// no center position avalible || even a vertical name would not fit || the name would have to be tilted && it would fully fit at the bottom
		if(nameBoxIndex == -1 || nameHeight > visibleNameBoxLength || visibleNameBoxLength - nameHeight*0 < nameWidth && nameWidth < visibleLength){ // too little splace
			yPos = bottom + nameHeight * 0.1;
			xPos = visibleLeft + visibleLength * 0.5;
			orientation = 0;
			if(visibleLength < nameWidth){
				//opacity = - 1 + 2 * visibleLength / nameWidth;
				opacity = 0;
			}else{
				opacity = 1;
			}
		}else{
			yPos = (top + bottom) * 0.5;
			xPos = visibleNameBoxLeft + visibleNameBoxLength * 0.5;
			if(visibleNameBoxLength - nameHeight > nameWidth){
				orientation = 0;
			}else{
				orientation = Math.acos((visibleNameBoxLength - nameHeight) / nameWidth);
			}
			opacity = 1;
			xPos += nameHeight * 0.3;
		}
		
		this.drawText(e.name, xPos, yPos, Tool.rgba(255,255,255,opacity), font, alignment = "center", orientation = orientation);
	}
}
Timeline.prototype.drawUnit = function(height, unitName, unitNameWidth, verticalOffset, getNameFunction, resetTimeFuntion, incrementTimeFunction){
	// calculate fading
	// // calcuate approximate interval width
	var date = new Date(Timeline.getTimeNow());
	resetTimeFuntion(date);
	var time0 = date.getTime();
	incrementTimeFunction(date);
	var intervalPeriod = date.getTime() - time0;
	var periodSize = intervalPeriod / this.zoom * this.canvas.width; // [this.zoom] = time / canvas width
	// // calcuate name size
	var unitValueName = getNameFunction(date);
	var font = "24px Arial";
	var nameSize = Tool.widthOfString(unitValueName, font);
	// // calcuate opacity value
	var opacity;
	if(nameSize * 2 > periodSize){
		//opacity = 1 - (nameSize * 2 - periodSize) * 0.01;
		opacity = 2 - nameSize * 2 / periodSize;
	}else{
		opacity = 1;
	}
	
	// draw intervals
	var opacityMargin = 2;
	if(opacity > -opacityMargin){
		this.drawIntervall(
			function(right, left, date){
				// calcuate vertical position of unit value. For example day = tuesday.
				var font = "24px Arial"; // TODO: abstract this outside function
				var unitValueName = getNameFunction(date); // eksample: 'week: 5'
				this.ctx.font = font;
				var margin = this.ctx.measureText(unitValueName).width;
				var xPos = Tool.clamp(this.canvas.width * 0.5, right - margin, left + margin);
				// draw unit name
				this.drawText(unitValueName, xPos, verticalOffset + 0.3 * parseInt(font), Tool.rgba(0,0,0,opacity), font, "center", 0);
				// draw horizontal ruler to seperate the units
				this.drawLine(right, this.verticalRulerHeight, right, this.canvas.height, Tool.rgba(0,0,0,opacity + opacityMargin), 1);
				this.drawLine(right, verticalOffset, right, verticalOffset + height, Tool.rgba(0,0,0,opacity + opacityMargin), 1);
			}.bind(this),
			resetTimeFuntion,
			incrementTimeFunction
		);
		// store resolution functions for later use
		this.resetTimeFuntion = resetTimeFuntion;
		this.incrementTimeFunction = incrementTimeFunction;
	}
	// unit name box
	var positions = [ // x, y, x2, y2,... coordiates.
		this.canvas.width, verticalOffset,
		this.canvas.width - unitNameWidth, verticalOffset,
		this.canvas.width - unitNameWidth, verticalOffset + height,
		this.canvas.width, verticalOffset + height
	];
	//this.drawPolygon(positions); // draw outline
	this.drawPolygon(positions, "#74984A", true); // draw fill
	// unit name
	this.drawText(unitName, this.canvas.width - unitNameWidth * 0.5, verticalOffset + 0.3 * parseInt(font), "black", font, "center", 0);
	// draw vertical ruler
	//this.drawLine(this.canvas.width - width - horizontalOffset, this.canvas.height, this.canvas.width - width - horizontalOffset, 0, "black", 1);
	this.drawLine(this.canvas.width, verticalOffset + height, 0, verticalOffset + height, "black", 1);
}
Timeline.prototype.drawIntervall = function(drawFunction, resetTimeFuntion, incrementTimeFunction){
	// function to call to print a block, function that floor a time object to desired unit, increment function that will add a desiret time unit
	// Example: Months
	/* TODO: update this example for horizontal view
	this.drawIntervall(
		function(top, bottom, date){ // this will be called for each month block
			drawVerticalLine(verticalPos, top);
			drawText(date.getDate(), (top + bottom) * 0.5);
		}.bind(this),
		function(date){ // floor date to closest month
			date.setMilliseconds(0);
			date.setSeconds(0);
			date.setMinutes(0);
			date.setHours(0);
			date.setDate(1);
		},
		function(date){
			date.setMonth(date.getMonth() + 1); // increment by one month
		}
	);
	*/
	
	var debugMakeScreenSmallerFactor = 1;
	
	var center = this.position + this.zoom * 0.5;
	
	var date = new Date(center - this.zoom);
	resetTimeFuntion(date);
	
	var t = date.getTime();
	var t0;
	
	while(this.timeToCanvasCoords(t) <= this.canvas.width){
		t0 = t;
		incrementTimeFunction(date);
		t = date.getTime();
		drawFunction(this.timeToCanvasCoords(t),
			this.timeToCanvasCoords(t0),
			new Date(t0));
	}
	
	/*
	//var xPos = center - date.getTime();
	//xPos *= 1 / this.zoom * this.canvas.width * debugMakeScreenSmallerFactor;
	var xPos = this.timeToCanvasCoords(date.getTime());
	
	var xPos0;
	var time0 = date.getTime();
	//for(var i=0; xPos >= this.canvas.width * (1 - debugMakeScreenSmallerFactor); i++){
	for(var i=0; xPos <= this.canvas.width * (1 - debugMakeScreenSmallerFactor); i++){
		xPos0 = xPos;
		//xPos -= (date.getTime() - time0) / this.zoom * this.canvas.width * debugMakeScreenSmallerFactor;
		xPos += (date.getTime() - time0) / this.zoom * this.canvas.width * debugMakeScreenSmallerFactor;
		
		if(i != 0){
			//drawFunction(xPos0, xPos, new Date(time0));
			drawFunction(xPos, xPos0, new Date(time0));
		}
		
		time0 = date.getTime();
		incrementTimeFunction(date);
	}*/
}
Timeline.prototype.canvasCoordsToTime = function(coords){ // TODO: rename to 'pixels to time'
	return this.zoom * (coords / this.canvas.width - 0.5) + this.position;
}
Timeline.prototype.timeToCanvasCoords = function(time){ // TODO: rename to 'time to pixels'
	return (time - this.position) / this.zoom * this.canvas.width + this.canvas.width * 0.5;
}
Timeline.prototype.drawButton = function(button){
	if(!button.visibility){
		return;
	}
	switch(button.shape){
		case Button.circle:
			this.drawCircleOutline(
				x = button.pos.x, y = button.pos.y, r = button.radius,
				colorFill = button.color, colorOutline = Color.mulRGB(button.color, 0.8), width = 5);
			break;
		case Button.square:
			this.drawRectOutline(
				x1 = button.pos.x - button.width * 0.5, y1 = button.pos.y - button.height * 0.5,
				x2 = button.pos.x + button.width * 0.5, y2 = button.pos.y + button.height * 0.5,
				colorFill = button.color, colorOutline = Color.mulRGB(button.color, 0.8), width = 5);
			break;
	}
	this.drawText(button.name, button.pos.x, button.pos.y - 24 * 0.25, new Color(255,255,255,1));
	
}
Timeline.prototype.drawText = function(name, xPos, yPos, color = "black", font = "24px Arial", alignment = "center", orientation = 0){
	this.ctx.textAlign = alignment;
	this.ctx.font = font;
	this.ctx.rotate(-orientation);
	yPos = this.canvas.height - yPos;
	var x = xPos * Math.cos(orientation) - yPos * Math.sin(orientation);
	var y = yPos * Math.cos(orientation) + xPos * Math.sin(orientation);
	this.ctx.fillStyle = color;
	this.ctx.fillText(name, x, y);
	this.ctx.rotate(orientation);
}
Timeline.prototype.drawCircleOutline = function(x, y, r, colorFill = new Color(), colorOutline = new Color(), width = 1){
	this.ctx.beginPath();
	//this.ctx.rect(x1, this.canvas.height - y1, x2 - x1, -(y2 - y1));
	this.ctx.arc(x, this.canvas.height - y, r, 0, 2 * Math.PI);
	
	this.ctx.fillStyle = colorFill.toString();
	this.ctx.fill();
	
	this.ctx.lineWidth = width;
	this.ctx.strokeStyle = colorOutline.toString();
	this.ctx.stroke();
}
Timeline.prototype.drawRectOutline = function(x1, y1, x2, y2, colorFill = new Color(), colorOutline = new Color(), width = 1){
	this.ctx.beginPath();
	this.ctx.rect(x1, this.canvas.height - y1, x2 - x1, -(y2 - y1));
	
	this.ctx.fillStyle = colorFill.toString();
	this.ctx.fill();
	
	this.ctx.lineWidth = width;
	this.ctx.strokeStyle = colorOutline.toString();
	this.ctx.stroke();
}
Timeline.prototype.drawBox = function(x1, y1, x2, y2, color = "black", fill = false, width = 1){
	this.ctx.beginPath();
	this.ctx.lineWidth = width;
	if(fill){
		this.ctx.fillStyle = color;
	}else{
		this.ctx.strokeStyle = color;
	}
	
	this.ctx.rect(x1, this.canvas.height - y1, x2 - x1, -(y2 - y1));
	
	if(fill){
		this.ctx.fill();
	}else{
		this.ctx.stroke();
	}
}
Timeline.prototype.drawVLine = function(width, length, xPos, yPos){
	this.ctx.beginPath();
	this.ctx.moveTo(xPos - length, this.canvas.height - yPos);
	this.ctx.lineTo(xPos + length, this.canvas.height - yPos);
	
	this.ctx.strokeStyle = "#AAAAAA";
	this.ctx.lineWidth = width;
	this.ctx.stroke();
}
Timeline.prototype.drawLine = function(x1, y1, x2, y2, color = "black", width = 1){
	this.ctx.beginPath();
	this.ctx.moveTo(x1, this.canvas.height - y1);
	this.ctx.lineTo(x2, this.canvas.height - y2);
	this.ctx.strokeStyle = color;
	this.ctx.lineWidth = width;
	this.ctx.stroke();
}
Timeline.prototype.drawPolygon = function(corners, color = "black", fill = false, width = 1){
	if(corners.length == 0){
		return;
	}
	this.ctx.beginPath();
	this.ctx.moveTo(corners[0], this.canvas.height - corners[1]);
	for (var i = 3; i < corners.length; i += 2){
		this.ctx.lineTo(corners[i-1], this.canvas.height - corners[i]);
	}
	if(fill){
		this.ctx.fillStyle = color;
	}else{
		this.ctx.strokeStyle = color;
	}
	this.ctx.lineWidth = width;
	if(fill){
		this.ctx.fill();
	}else{
		this.ctx.stroke();
	}
}
Timeline.prototype.getNrOfTouches = function(){
	var n=0;
	for(var i=0; i<this.touchList.length; i++){
		if(this.touchList[i].isDown > 0){
			n++;
		}
	}
	return n;
}
Timeline.prototype.globalControls = function(){
	// activate screen
	if(
		(
			this.mouseClicked()
		) &&
		this.status == Timeline.standard &&
		!this.cancelActivationChange){
		
		this.isActive = !this.isActive;
	}
}
Timeline.prototype.taskControls = function(){
	// check for clicks
	if(this.isActive && this.mouseClicked()){
		detectClick(this, this.tasks);
		function detectClick(that, tasks){
			for(var i=0; i<tasks.length; i++){
				var t = tasks[i];
				detectClick(that, t.children);
				
				if(!t.isDone && t.children.length == 0 &&
						Math.abs(that.mouseData.pos.x - t.position.x) < t.width * 0.5 &&
						Math.abs(that.mouseData.pos.y - t.position.y) < t.height * 0.5){
					that.cancelActivationChange = true;
					that.taskToBePlaced = t;
					that.status = Timeline.addEventSetStart;
					that.changeViewButton.visibility = false;
					that.confirmEventPlacementButton.visibility = true;
				}
			}
		};
		
		/*for(var i=0; i<this.tasks.length; i++){
			var t = this.tasks[i];
			if(Math.abs(this.mouseData.pos.x - t.position.x) < t.width * 0.5 &&
					Math.abs(this.mouseData.pos.y - t.position.y) < t.height * 0.5){
				this.cancelActivationChange = true;
				this.taskToBePlaced = t;
				this.status = Timeline.addEventSetStart;
				this.changeViewButton.visibility = false;
				this.confirmEventPlacementButton.visibility = true;
			}
		}*/
	}
	
	calcMovement(this.tasks);
	function calcMovement(tasks){
		for(var i=0; i<tasks.length; i++){
			var t = tasks[i];
			calcMovement(t.children);
			
			var movementSpeed = 0.1 * Math.pow(1.2, 1); // TODO: fix 1 to faster the more left
			t.targetPosition0 = Vec.lerp(t.targetPosition0, t.targetPosition1, movementSpeed);
			t.position = Vec.lerp(t.position, t.targetPosition0, movementSpeed);
		}
	};
}
Timeline.prototype.timelineControls = function(){
	// controls
	var zoomSensitivity = 2;
	var scrollSensitivity = 1;
	var deltaY = 0;
	var deltaX = 0;
	// // touch
	/*for(var i=0; i<this.touchList.length; i++){
		var t = this.touchList[i];
		if(!t.isDown){
			continue;
		}
		// zoom
		deltaY += (t.y - t.y0) / this.canvas.height * this.zoom * zoomSensitivity;
	}
	for(var i=0; i<this.touchList.length; i++){
		var t = this.touchList[i];
		if(!t.isDown){
			continue;
		}
		// scroll sideways
		deltaX -= (t.x - t.x0) / this.canvas.width * this.zoom * scrollSensitivity +
			deltaY / this.getNrOfTouches() * (t.x - this.canvas.width * 0.5) / this.canvas.width;
	}
	if(this.getNrOfTouches() != 0){
		deltaY /= this.getNrOfTouches();
		deltaX /= this.getNrOfTouches();
	}*/
	// // mouse
	if(this.mouseData.isDown){
		deltaY += (this.mouseData.pos.y - this.mouseData.pos0.y) / this.canvas.height * this.zoom * zoomSensitivity;
		deltaX -= (this.mouseData.pos.x - this.mouseData.pos0.x) / this.canvas.width * this.zoom * scrollSensitivity +
			deltaY * (this.mouseData.pos.x - this.canvas.width * 0.5) / this.canvas.width;
	}
	// // apply
	if(this.isActive){
		// // zoom
		this.zoom += deltaY;
		this.zoom = Tool.clamp(this.zoom, this.maxZoom, this.minZoom);
		// movement
		this.targetPosition += deltaX;
		this.position += deltaX;
	}
}
Timeline.prototype.touchStartOneFinger = function(event){
	
	for(var i=0; i<event.touches.length; i++){
		var e = event.touches[i];
		var t = this.touchList[e.identifier];
		
		t.x = this.getTouchX(e);
		t.y = this.getTouchY(e);
		t.x0 = this.getTouchX(e);
		t.y0 = this.getTouchY(e);
		t.xR = e.radiusX;
		t.yR = e.radiusY;
		t.id = e.identifier;
		t.timeDown = 1;
		t.isDown = true;
	}
	
	if(this.isActive){
		event.preventDefault();
	}
}
Timeline.prototype.touchMoveOneFinger = function(event){
	
	for(var i=0; i<event.touches.length; i++){
		var e = event.touches[i];
		var t = this.touchList[e.identifier];
		
		t.x = this.getTouchX(e);
		t.y = this.getTouchY(e);
		t.xR = e.radiusX;
		t.yR = e.radiusY;
	}
	
	if(this.isActive){
		event.preventDefault();
	}
}
Timeline.prototype.touchEndOneFinger = function(event){
	
	for(var i=0; i<event.changedTouches.length; i++){
		var e = event.changedTouches[i];
		var t = this.touchList[e.identifier];
		t.timeUp = 1;
		t.isDown = false;
	}
	
	if(this.isActive){
		event.preventDefault();
	}
}
Timeline.prototype.getTouchX = function(e){
	return e.pageX - e.target.parentElement.offsetLeft;
}
Timeline.prototype.getTouchY = function(e){
	return this.canvas.height - (e.pageY - e.target.parentElement.offsetTop);
}
Timeline.prototype.scroll = function(event){
	if(!this.isActive){
		return;
	}
	if(event.ctrlKey){ // zoom
		this.zoom *= 1 + event.deltaY * 0.001;
	}else{ // scroll
		this.targetPosition += event.deltaY * 0.0005 * this.zoom;
	}
	
	event.preventDefault();
}
Timeline.prototype.mouseMove = function(event){
	this.mouseData.pos = new Vec(this.getTouchX(event), this.getTouchY(event));
}
Timeline.prototype.mouseDown = function(event){
	if(this.mouseData.isDown){
		return;
	}
	this.mouseData.timeDown = 1;
	this.mouseData.isDown = true;
}
Timeline.prototype.mouseUp = function(event){
	if(!this.mouseData.isDown){
		return;
	}
	this.mouseData.timeUp = 1;
	this.mouseData.isDown = false;
}
Timeline.prototype.mouseClicked = function(){
	return !this.mouseData.isDown && this.mouseData.timeUp == 1 && this.mouseData.timeDown <= mf_timeline.fps * 0.2 && // clicked for less than 0.2 seconds ...
		Vec.lgth(Vec.sub(this.mouseData.pos, this.mouseData.pos0)) < 10; // ... and didn't move much.
}
var mf_timeManipulator;
Timeline.getTimeNow = function(){
	if(mf_timeManipulator != null){
		return new Date(mf_timeManipulator).getTime();
	}
	return new Date().getTime();
}
// Color
function Color(r, g, b, a = 1){ // TODO: integrate random color here
	this.r = r;
	this.g = g;
	this.b = b;
	this.a = a;
}
Color.prototype.toString = function(){
	return "rgba(" + Math.floor(Math.min(Math.max(this.r, 0), 255)) + "," +
		Math.floor(Math.min(Math.max(this.g, 0), 255)) + "," +
		Math.floor(Math.min(Math.max(this.b, 0), 255)) + "," +
		Math.min(Math.max(this.a, 0), 1) + ")";
}
Color.add = function(c1, c2){
	return new Color(c1.r + c2.r, c1.g + c2.g, c1.b + c2.b, c1.a + c2.a);
}
Color.sub = function(c1, c2){
	return new Color(c1.r - c2.r, c1.g - c2.g, c1.b - c2.b, c1.a - c2.a);
}
Color.addRGB = function(c1, c2){
	return new Color(c1.r + c2.r, c1.g + c2.g, c1.b + c2.b, (c1.a + c2.a) * 0.5);
}
Color.subRGB = function(c1, c2){
	return new Color(c1.r - c2.r, c1.g - c2.g, c1.b - c2.b, (c1.a + c2.a) * 0.5);
}
Color.mulRGB = function(c, m){
	return new Color(c.r * m, c.g * m, c.b * m, c.a);
}
// Button
function Button(pos, name, color){
	this.pos = Vec.newVec(pos);
	this.name = name;
	this.width = 0;
	this.height = 0;
	this.radius = 0;
	this.color = color;
	this.shape;
	this.callBack;
	this.visibility = true;
}
Button.square = 0;
Button.circle = 1;








